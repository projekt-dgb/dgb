{
  "regex": {
    "ABT2_SATZ_1_BEVOR_KLAMMER_1": "(.*)\\((.*)\\)",
    "ALS_GESAMTBERECHTIGTE_1": "(.*),? als Gesamtberechtigte gemäß § (\\d*) BGB -?(.*)",
    "AMT_FÜR_1": "für (.*)mt für (.*)",
    "AUFLÖSEND_BEDINGT_1": "Das Recht ist auflösend bedingt",
    "AUSÜBUNG_1": "Die Ausübung (.*) darf Dritten überlassen werden",
    "BELASTETEN_GRUNDSTÜCKE_1": "jetzt unter(.*)Nr. (.*) gebucht",
    "BINDESTRICH_2": "-\\nund",
    "BINDESTRICH_3": "(.*)-\\s([a-züäö])(.*)",
    "EINGETRAGEN_AM_1": "ingetragen am (\\d\\d).(\\d\\d).(\\d\\d\\d\\d)",
    "EINGETRAGEN_AM_2": "ingetragen (.*) am (\\d\\d).(\\d\\d).(\\d\\d\\d\\d)",
    "EINGETRAGEN_AM_3": "(.*) eingetragen am (dd).(dd).(dddd)",
    "EINGETRAGEN_AM_4": "(.*)eingetragen am(.*)",
    "EINGETRAGEN_AM_5": "(.*)am(.*)",
    "FLUR_FLURSTUECK_1": "Flur (\\d*) Flurstück (\\S*)",
    "FLUR_FLURSTUECK_2": "Flur (\\d*) Flst. (\\S*)",
    "FLUR_FLURSTUECK_3": "Flur (\\d*), Flst. (\\S*)",
    "FLUR_FLURSTUECK_4": "Flurstück (\\S*) der Flur (\\d*)",
    "FLUR_FLURSTUECK_5": "Flur (\\d*), Flurstück (\\S*)",
    "FLUR_FLURSTUECK_6": "Flur (\\d*), Flurstück (\\S*) und (\\S*)",
    "FLUR_FLURSTUECK_7": "Flur (\\d*), Flst. (\\S*) und (\\S*)",
    "FLUR_FLURSTUECK_BZGL_1": "\\((.*)BV-Nr.(.*)\\)",
    "FÜR_1": "für (.*)",
    "GESAMTHAFT_1": "Gesamthaft besteht in (.*)",
    "GLEICHRANG_1": "ingetragen(.*)im gleichen Rang mit(.*)",
    "GLEICHRANG_2": "(.*)im gleichen Rang mit(.*)",
    "GLEICHRANG_3": "(.*)im Gleichrang mit den Rechten(.*)",
    "GLEICHRANG_4": "(.*)im Gleichrang mit(.*)",
    "GRUNDSCHULD_1": "Grundschuld (.*) über (.*) für (.*)",
    "GRUNDSCHULD_2": "(.*) Grundschuld (.*) für (.*)",
    "HAT_RECHT_VOR_1": "(.*) hat Recht vor (.*)",
    "HAT_RECHT_VOR_2\n": "(.*) hat Rang vor (.*)",
    "IM_RANG_VOR_1": "(.*) im Rang vor (.*) eingetragen am (.*)",
    "IM_RANG_VOR_2": "(.*) im Rang vor (.*)",
    "KOMMA_1": "(.*),(\\d\\d)",
    "KOMMA_2": "(.*)\\.(\\d\\d)",
    "LASTEND_AN_ANTEIL_1": "dem Anteil Abt. I Nr. (.*)",
    "LÖSCHBAR_BEI_TODESNACHWEIS_1": ",? löschbar bei Todesnachweis,?",
    "MIT_DEM_INHALT_DES_RECHTS_1": "mit dem Inhalt des Rechts Abteilung II Nr. (\\d*)",
    "MIT_DEM_INHALT_DES_RECHTS_2": "mit dem Inhalt des Rechts Abt. II Nr. (\\d*)",
    "MIT_ZINSEN_1": "(.*) mit (.*)insen",
    "NEU_EINGETRAGEN_1": "Nr\\. (\\S*)(.*)als Nr\\. (\\S*) neu eingetragen",
    "NEU_EINGETRAGEN_2": "Nummer (\\S*)(.*)als Nummer (\\S*) eingetragen\n",
    "NUR_LASTEND_AN_1": "Nur lastend an (.*):",
    "NUR_LASTEND_AN_2": "Nur lastend auf (.*):\n",
    "NUR_LASTEND_AN_3": "nur lastend an (.*) für",
    "NUR_LASTEND_AN_4": "nur lastend auf (.*) für",
    "UNTER_BEZUGNAHME_AUF_1": "(.*)unter Bezugnahme auf(.*)",
    "VERERBLICH_1": "Das Recht ist vererblich",
    "VERSELBSTSTÄNDIGT_1": "Aus(.*)Nr. (S*)(.*)verselbstständigt und als(.*)Nr. (S*) eingetragen",
    "VOLLSTRECKBAR_1": "(.)ollstreckbar gemäß (.*) ZPO",
    "VOLLSTRECKBAR_2": ",?(.)(.)ollstreckbar nach (.*)",
    "VOM_1": "(.*) vom (\\d\\d)\\s?\\.\\s?(\\d\\d)\\s?\\.\\s?(\\d\\d\\d\\d)(.*)",
    "VON_AMTS_WEGEN_EINGETRAGEN_1": "Von Amts wegen eingetragen",
    "VON_BIS_1": "(\\d*)-(\\d*)",
    "VORMERKUNG_BPD_1": "(.*)Vormerkung(.*)Dienstbarkeit(.*)Rechts Abteilung II Nr. (\\d)(.*)",
    "VORMERKUNG_BPD_2": "(.*)Vormerkung(.*)Dienstbarkeit(.*)Rechts Abt. II Nr. (\\d)(.*)",
    "WIDERSPRUCH_1": "Widerspruch (.*) zugunsten (.*) für (.*) gegen",
    "ZERLEGT_1": "Flurstück (\\d*) ist zerlegt in die Flurstücke (\\d*) und (\\d*)",
    "ZUGUNSTEN_1": "(.*)zugunsten(.*)",
    "ÜBERTRAGEN_1": "Von Nr\\. (\\S*)\\W(.*)übertragen nach\n",
    "ÜBERTRAGEN_AM_1": "hierher übertragen am (\\d\\d).(\\d\\d).(\\d\\d\\d\\d)"
  },
  "abkuerzungen_script": [
    "return [",
    "    \" Dr\",",
    "    \" Prof\",",
    "    \" Co\",",
    "    \" v\", ",
    "    \" URNr\", ",
    "    \" Abt\", ",
    "    \" Co\", ",
    "    \"bzlg\",",
    "    \" bzw\",",
    "    \" Dipl.-Kfm\",",
    "    \" geb\", ",
    "    \" lfd\", ",
    "    \" Nr\", ",
    "]"
  ],
  "text_saubern_script": [
    " ",
    "recht = recht.replace(\"G r u n d s c h u l d\", \"Grundschuld\")",
    "recht = recht.replace(\"o h n e\", \"ohne\")",
    "recht = recht.replace(\"B r i e f\", \"Brief\")",
    "recht = recht.replace(\"ü b e r\", \"über\")",
    "recht = recht.replace(\"f ü r\", \"für\")",
    " ",
    "recht = \" \".join(recht.splitlines())",
    "und_saetze = recht.split(\"- und\")",
    " ",
    "text_sauber = \"\"",
    "  ",
    "for index, s in enumerate(und_saetze):",
    "    while re[\"BINDESTRICH_3\"].matches(s):",
    "        s = re[\"BINDESTRICH_3\"].replace_all(s, \"$1$2$3\")",
    "    text_sauber += s",
    "    if (index + 1 != len(und_saetze)):",
    "        text_sauber += \"- und \"",
    " ",
    "return text_sauber"
  ],
  "text_kuerzen_abt2_script": [
    " ",
    "erster_satz = saetze[0]",
    " ",
    "if (len(rangvermerk) > 0):",
    "    erster_satz += \" \" + rangvermerk",
    " ",
    "erster_satz = erster_satz.rstrip().lstrip()",
    " ",
    "if re[\"NUR_LASTEND_AN_1\"].matches(erster_satz):",
    "    erster_satz = re[\"NUR_LASTEND_AN_1\"].replace_all(erster_satz, \"\")",
    "if re[\"NUR_LASTEND_AN_2\"].matches(erster_satz):",
    "    erster_satz = re[\"NUR_LASTEND_AN_2\"].replace_all(erster_satz, \"\")",
    "if re[\"NUR_LASTEND_AN_3\"].matches(erster_satz):",
    "    erster_satz = re[\"NUR_LASTEND_AN_3\"].replace_all(erster_satz, \"für\")",
    "if re[\"NUR_LASTEND_AN_4\"].matches(erster_satz):",
    "    erster_satz = re[\"NUR_LASTEND_AN_4\"].replace_all(erster_satz, \"für\")",
    " ",
    "erster_satz = erster_satz.rstrip().lstrip()",
    " ",
    "if erster_satz.startswith(\"Beschränkte persönliche Dienstbarkeit\"):",
    "    erster_satz = erster_satz.replace(\"Beschränkte persönliche Dienstbarkeit\", \"BpD\")",
    " ",
    "erster_satz = erster_satz.rstrip().lstrip()",
    " ",
    "if re[\"VORMERKUNG_BPD_1\"].matches(erster_satz):",
    "    erster_satz = re[\"VORMERKUNG_BPD_1\"].replace_all(erster_satz, \"Vormerkung BpD mit dem Inhalt des Rechts Abt. II $4 $5\")",
    " ",
    "if re[\"VORMERKUNG_BPD_2\"].matches(erster_satz):",
    "    erster_satz = re[\"VORMERKUNG_BPD_2\"].replace_all(erster_satz, \"Vormerkung BpD mit dem Inhalt des Rechts Abt. II $4 $5\")",
    " ",
    "erster_satz = erster_satz.rstrip().lstrip()",
    " ",
    "if \"unter Bezugnahme\" in erster_satz:",
    "    erster_satz = erster_satz.split(\"unter Bezugnahme\")[0]",
    " ",
    "erster_satz = erster_satz.rstrip().lstrip()",
    " ",
    "if re[\"VOM_1\"].matches(erster_satz):",
    "    erster_satz = re[\"VOM_1\"].find_in(erster_satz, 0) + re[\"VOM_1\"].find_in(erster_satz, 4)",
    " ",
    "if re[\"ALS_GESAMTBERECHTIGTE_1\"].matches(erster_satz):",
    "    erster_satz = re[\"ALS_GESAMTBERECHTIGTE_1\"].replace_all(erster_satz, \"$1$3\")",
    " ",
    "if erster_satz.endswith(\",\"):",
    "    erster_satz = erster_satz[:-1]",
    " ",
    "if erster_satz.startswith(\"Ein Vorkaufsrecht\"):",
    "    erster_satz = erster_satz[4:]",
    "",
    "return erster_satz + \".\""
  ],
  "text_kuerzen_abt3_script": [
    " ",
    "gesamthaft = []",
    "for s in saetze:",
    "    if \"Gesamthaft\" in s:",
    "        gesamthaft.append(s)",
    " ",
    "if schuldenart == \"\" or betrag == \"\":",
    "    return \"\"",
    " ",
    "gekuerzt = schuldenart + \" über \" + betrag + \" für \" + rechtsinhaber",
    " ",
    "if len(gesamthaft) > 0:",
    "    gekuerzt += \". \"",
    "    gekuerzt += \". \".join(gesamthaft)",
    " ",
    "return gekuerzt + \".\""
  ],
  "betrag_auslesen_script": [
    " ",
    "recht = saetze[0]",
    " ",
    "waehrungen = [",
    "    (' EUR', Waehrung.Euro),",
    "    (' Euro', Waehrung.Euro),",
    "    (' €', Waehrung.Euro),",
    "    (' Deutsche Mark', Waehrung.DMark),",
    "    (' DM', Waehrung.DMark),",
    "    (' Mark', Waehrung.MarkDDR),",
    "    (' M', Waehrung.MarkDDR),",
    "    (' Goldmark', Waehrung.Goldmark),",
    "    (' GM', Waehrung.Goldmark),",
    "    (' Reichsmark', Waehrung.Reichsmark),",
    "    (' RM', Waehrung.Reichsmark),",
    "    (' Rentenmark', Waehrung.Rentenmark),",
    "    (' GF', Waehrung.GrammFeingold),",
    "    (' Gramm Feingold', Waehrung.GrammFeingold),",
    "]",
    " ",
    "waehrung = None",
    "for k, v in waehrungen:",
    "    if k in recht:",
    "        waehrung = v",
    " ",
    "if waehrung is None:",
    "    raise Exception(\"Konnte Währung nicht auslesen\")",
    " ",
    "for k, v in waehrungen:",
    "    recht = recht.replace(k, \"\")",
    " ",
    "recht = recht.rstrip().lstrip()",
    " ",
    "nachkomma = 0",
    "if re[\"KOMMA_1\"].matches(recht):",
    "    nachkomma = int(float(re[\"KOMMA_1\"].find_in(recht, 1)))",
    "    recht = re[\"KOMMA_1\"].replace_all(recht, \"$1\")",
    "elif re[\"KOMMA_2\"].matches(recht):",
    "    nachkomma = int(float(re[\"KOMMA_2\"].find_in(recht, 1)))",
    "    recht = re[\"KOMMA_2\"].replace_all(recht, \"$1\")",
    " ",
    "recht = recht.rstrip().lstrip()",
    "recht = recht.replace(\".\", \"\")",
    "recht = recht.replace(\",\", \"\")",
    "",
    "wert = int(float(recht))",
    "return Betrag(wert, nachkomma, waehrung)"
  ],
  "rechtsinhaber_auslesen_abt3_script": [
    " ",
    "recht = \". \".join(saetze)",
    "inhaber = None",
    " ",
    "if re[\"ZUGUNSTEN_1\"].matches(recht):",
    "    # \"Widerspruch für XXX zugunsten YYY\" - YYY ist der Rechteinhaber, nicht XXX",
    "    inhaber = re[\"ZUGUNSTEN_1\"].find_in(saetze[0], 1)",
    "# \"[RechteArt] für das Landesamt für XXX\"",
    "elif \"amt für\" in saetze[0].lower():",
    "    inhaber = re[\"AMT_FÜR_1\"].find_in(saetze[0], 0) + \"mt für \" + re[\"AMT_FÜR_1\"].find_in(saetze[0], 1)",
    "else:",
    "    inhaber = re[\"FÜR_1\"].find_in(saetze[0], 0)",
    "  ",
    "if inhaber is None:",
    "    return \"\"",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    " ",
    " ",
    "if re[\"ALS_GESAMTBERECHTIGTE_1\"].matches(inhaber):",
    "    inhaber = re[\"ALS_GESAMTBERECHTIGTE_1\"].replace_all(inhaber, \"$1$3\")",
    "",
    "if inhaber.endswith(\",\"):",
    "    inhaber = inhaber[:-1]",
    " ",
    "if not(\"amt\" in inhaber.lower()):",
    "    if \"für \" in inhaber:",
    "        inhaber = inhaber.split(\"für \")[1]",
    "   ",
    "inhaber = re[\"ALS_GESAMTBERECHTIGTE_1\"].replace_all(inhaber, \"\")",
    "inhaber = re[\"LÖSCHBAR_BEI_TODESNACHWEIS_1\"].replace_all(inhaber, \"\")",
    "inhaber = re[\"VOLLSTRECKBAR_2\"].replace_all(inhaber, \"\")",
    " ",
    "if re[\"UNTER_BEZUGNAHME_AUF_1\"].matches(inhaber):",
    "    inhaber = re[\"UNTER_BEZUGNAHME_AUF_1\"].find_in(inhaber, 0)",
    "",
    "inhaber = inhaber.rstrip().lstrip()",
    "for s in [\"die\", \"der\", \"den\", \"das\", \"des Berechtigten\"]:",
    "    if inhaber.startswith(s):",
    "        inhaber = inhaber.replace(s, \"\", 1)",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    " ",
    "if \" auf Grund \" in inhaber:",
    "    inhaber = inhaber.split(\" auf Grund \")[0]",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    "",
    "if re[\"MIT_ZINSEN_1\"].matches(inhaber):",
    "    inhaber = re[\"MIT_ZINSEN_1\"].find_in(inhaber, 0)",
    "",
    "inhaber = inhaber.rstrip().lstrip()",
    "",
    "",
    "return inhaber"
  ],
  "rechtsinhaber_auslesen_abt2_script": [
    " ",
    "recht = \". \".join(saetze)",
    "inhaber = None",
    " ",
    "if re[\"ZUGUNSTEN_1\"].matches(recht):",
    "    # \"Widerspruch für XXX zugunsten YYY\" - YYY ist der Rechteinhaber, nicht XXX",
    "    inhaber = re[\"ZUGUNSTEN_1\"].find_in(saetze[0], 1)",
    "# \"[RechteArt] für das Landesamt für XXX\"",
    "elif \"amt für\" in saetze[0].lower():",
    "    inhaber = re[\"AMT_FÜR_1\"].find_in(saetze[0], 0) + \"mt für \" + re[\"AMT_FÜR_1\"].find_in(saetze[0], 1)",
    "else:",
    "    inhaber = re[\"FÜR_1\"].find_in(saetze[0], 0)",
    "  ",
    "if inhaber is None:",
    "    return \"\"",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    " ",
    " ",
    "if re[\"ALS_GESAMTBERECHTIGTE_1\"].matches(inhaber):",
    "    inhaber = re[\"ALS_GESAMTBERECHTIGTE_1\"].replace_all(inhaber, \"$1$3\")",
    " ",
    "if inhaber.endswith(\",\"):",
    "    inhaber = inhaber[:-1]",
    " ",
    "if not(\"amt\" in inhaber.lower()):",
    "    if \"für \" in inhaber:",
    "        inhaber = inhaber.split(\"für \")[1]",
    "   ",
    "inhaber = re[\"ALS_GESAMTBERECHTIGTE_1\"].replace_all(inhaber, \"\")",
    "inhaber = re[\"LÖSCHBAR_BEI_TODESNACHWEIS_1\"].replace_all(inhaber, \"\")",
    "inhaber = re[\"VOLLSTRECKBAR_2\"].replace_all(inhaber, \"\")",
    " ",
    "if re[\"UNTER_BEZUGNAHME_AUF_1\"].matches(inhaber):",
    "    inhaber = re[\"UNTER_BEZUGNAHME_AUF_1\"].find_in(inhaber, 0)",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    "for s in [\"die\", \"der\", \"den\", \"das\", \"des Berechtigten\"]:",
    "    if inhaber.startswith(s):",
    "        inhaber = inhaber.replace(s, \"\", 1)",
    "",
    "inhaber = inhaber.rstrip().lstrip()",
    "",
    "if \" auf Grund \" in inhaber:",
    "    inhaber = inhaber.split(\" auf Grund \")[0]",
    "",
    "inhaber = inhaber.rstrip().lstrip()",
    "",
    "return inhaber"
  ],
  "rangvermerk_auslesen_abt2_script": [
    " ",
    "recht = \". \".join(saetze)",
    " ",
    "if not(\"Gleichrang\" in recht or \"Rang\" in recht):",
    "    return \"\"",
    " ",
    "rvm = []",
    " ",
    "for s in saetze:",
    "    if \"hat Rang vor\" in s:",
    "        rvm.append(\". \" + s.rstrip().lstrip() + \". \")",
    "    elif \"im gleichen Rang mit\" in s:",
    "        r = s.split(\"im gleichen Rang mit\")[1]",
    "        rvm.append(\" im gleichen Rang mit \" + r)",
    "    elif \"im Gleichrang mit\" in s:",
    "        r = s.split(\"im Gleichrang mit\")[1]",
    "        rvm.append(\" im Gleichrang mit \" + r)",
    "    elif \"im Rang nach\" in s:",
    "        r = s.split(\"im Rang nach\")[1]",
    "        rvm.append(\" im Rang nach \" + r)",
    "    elif \"im Rang vor\" in s:",
    "        r = s.split(\"im Rang vor\")[1]",
    "        rvm.append(\" im Rang vor \" + r)",
    "    ",
    "for i, r in enumerate(rvm):",
    "    if \"eingetragen am\" in r:",
    "       rvm[i] = r.split(\"eingetragen am\")[0]",
    "    elif \"am \" in r:",
    "       rvm[i] = r.split(\"am \")[0]",
    " ",
    "if len(rvm) == 0:",
    "    raise Exception(\"Rangvermerk vorhanden, aber nicht lesbar\")",
    " ",
    "rvm_join = \"\".join(rvm)",
    " ",
    "return rvm_join.rstrip().lstrip()"
  ],
  "klassifiziere_rechteart": [
    "recht = saetze[0]",
    "leitungsrecht = [",
    "    \"Leitungsrecht\",",
    "    \"Leitungs-\",",
    "    \"Trinkwasserleitung\",",
    "    \"Leitungstrassenrecht\",",
    "    \"leitungsrecht\",",
    "    \"Ferngasleitungs\",",
    "    \"Kabelanlagenrecht\",",
    "    \"-Leitung\",",
    "    \"leitung \",",
    "]",
    "if any(l in recht for l in leitungsrecht):",
    "    if \"Gasleitungsrecht\" in recht:",
    "        return RechteArt.GasleitungGasreglerstationFerngasltg",
    "    elif \"Hochspannungsfreileitung\" in recht:",
    "        return RechteArt.Hochspannungsleitungsrecht",
    "    else:",
    "        return RechteArt.LeitungsOderAnlagenrecht",
    "if \"Kabelrecht\" in recht or \"Kabeltrassenrecht\" in recht:",
    "    return RechteArt.Kabelrecht",
    "if \"Wegerecht\" in recht:",
    "    return RechteArt.GehWegeFahrOderLeitungsrecht",
    "if \"Vormerkung zur Sicherung des bedingten Anspruchs auf Rückauflassung\" in recht:",
    "    return RechteArt.Rueckauflassungsvormerkung",
    "if \"Vormerkung zur Sicherung des Anspruchs auf Rückauflassung\" in recht:",
    "    return RechteArt.Rueckauflassungsvormerkung",
    "if \"Rückauflassungsvormerkung\" in recht:",
    "    return RechteArt.Rueckauflassungsvormerkung",
    "if \"uflassungsvormerkung\" in recht:",
    "    return RechteArt.Auflassungsvormerkung",
    "if \"Vorkaufsrecht\" in recht or \"Eigentumsübertragungsvormerkung\" in recht:",
    "    return RechteArt.Vorkaufsrecht",
    "if \"Nießbrauch\" in recht:",
    "    return RechteArt.Niessbrauchrecht",
    "if \"Mitbenutzungsrecht\" in recht:",
    "    return RechteArt.Mitbenutzungsrecht",
    "if \"Widerspruch\" in recht:",
    "    return RechteArt.Widerspruch",
    " ",
    "mit_dem_inhalt_des_rechts = re[\"MIT_DEM_INHALT_DES_RECHTS_1\"].find_in(recht, 0)",
    "if mit_dem_inhalt_des_rechts is not None:",
    "    return RechteArt.SpeziellVormerkung(int(float(mit_dem_inhalt_des_rechts)))",
    "mit_dem_inhalt_des_rechts = re[\"MIT_DEM_INHALT_DES_RECHTS_2\"].find_in(recht, 0)",
    "if mit_dem_inhalt_des_rechts is not None:",
    "    return RechteArt.SpeziellVormerkung(int(float(mit_dem_inhalt_des_rechts)))",
    " ",
    "benutzungsrecht = [",
    "    \"Benutzungsrecht\",",
    "    \"Benutzungs-\",",
    "    \"Benutzung-\",",
    "]",
    "if any(b in recht for b in benutzungsrecht):",
    "    return RechteArt.Benutzungsrecht",
    "if \"Fahrrecht\" in recht:",
    "    return RechteArt.GehWegeFahrOderLeitungsrecht",
    " ",
    "if \"Verpflichtung\" in recht and \"frei zugänglich zu halten\":",
    "    return RechteArt.SonstigeDabagrechteart",
    "if \"Abstandsflächen\" in recht:",
    "    return RechteArt.SonstigeDabagrechteart",
    "if \"Recht zur Pflanzung\" in recht:",
    "    return RechteArt.SonstigeDabagrechteart",
    "if \"Bodenreformvermerk\" in recht:",
    "    return RechteArt.SonstigeDabagrechteart",
    "if \"Duldung\" in recht:",
    "    if \"Baumwurf\" in recht:",
    "        return RechteArt.DuldungVonEinwirkungenDurchBaumwurf",
    "    elif \"Fernmelde\" in recht:",
    "        return RechteArt.DuldungVonFernmeldeanlagen",
    "    else:",
    "        return RechteArt.SonstigeDabagrechteart",
    "if \"Ausgleich\" in recht and \"maßnahmen\" in recht:",
    "    return RechteArt.SonstigeDabagrechteart",
    "",
    "raise Exception(\"Konnte RechteArt nicht auslesen\")"
  ],
  "klassifiziere_schuldenart": [
    " ",
    "recht = \". \".join(saetze)",
    " ",
    "stichwoerter = [",
    "    ('Gesamtgrundschuld', SchuldenArt.Grundschuld),",
    "    ('Grundschuld', SchuldenArt.Grundschuld),",
    "    ('grundschuld', SchuldenArt.Grundschuld),",
    "    ('Hypothek', SchuldenArt.Hypothek),",
    "    ('Rentenschuld', SchuldenArt.Rentenschuld),",
    "    ('Aufbauhypothek', SchuldenArt.Aufbauhypothek),",
    "    ('Sicherungshypothek', SchuldenArt.Sicherungshypothek),",
    "    ('Widerspruch', SchuldenArt.Widerspruch),",
    "    ('Arresthypothek', SchuldenArt.Arresthypothek),",
    "    ('Hoechstbetragshypothek', SchuldenArt.Hoechstbetragshypothek),",
    "    ('Sicherungsgrundschuld', SchuldenArt.Sicherungsgrundschuld),",
    "    ('Zwangssicherungshypothek', SchuldenArt.Zwangssicherungshypothek),",
    "    ('Kaufpreis', SchuldenArt.Grundschuld),",
    "    ('Gläubiger', SchuldenArt.Grundschuld),",
    "]",
    " ",
    "if \"Sicherungshypothek\" in recht:",
    "    if \"§128\" in recht:",
    "        return SchuldenArt.SicherungshypothekGem128ZVG",
    "    else:",
    "        return SchuldenArt.Sicherungshypothek",
    "else:",
    "    for k, v in stichwoerter:",
    "        if k in recht:",
    "            return v",
    " ",
    "raise Exception(\"Konnte SchuldenArt nicht auslesen\")"
  ]
}