name: Build

on:
  push:
    branches:
      - 'master'
      - 'test'
    tags:
      # this is _not_ a regex, see: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - '[0-9]+.[0-9]+.[0-9]+*'
  pull_request:
  workflow_dispatch:
    inputs:
      release:
          description: 'Make release'

jobs:
  setup:
    name: Set up
    runs-on: ubuntu-22.04
    outputs:
      VERSION: ${{ steps.setup.outputs.VERSION }}
      DOING_RELEASE: ${{ steps.setup.outputs.DOING_RELEASE }}
    steps:
      - name: Set up env vars
        id: setup
        shell: bash
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          DOING_RELEASE=$(echo $VERSION | grep -c '^[0-9]\+\.[0-9]\+\.[0-9]\+\(-\([a-zA-Z]\+\)\?[0-9]*\)\?$' || true)
          echo "DOING_RELEASE=${DOING_RELEASE}" >> $GITHUB_OUTPUT
          echo $VERSION
          echo $DOING_RELEASE

  build:
    name: Build on ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: macos-x64
            os: macos-11
            artifact_name: 'dgb-darwin-amd64'
          - build: linux-x64
            os: ubuntu-22.04
            artifact_name: 'dgb-linux-amd64'
          - build: windows-x64
            os: windows-2019
            artifact_name: 'dgb-windows-amd64'
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.69
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ matrix.build }}-${{ matrix.target }}-cargo-${{ hashFiles('Cargo.lock') }}-v1
      - name: Bundle Linux
        if: matrix.build == 'linux-x64'
        shell: bash
        run: |
          sudo apt install pkg-config libgtk-3-dev libssl-dev clang cmake libsoup-3.0-dev libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev libayatana-appindicator3-dev
          sudo update-alternatives --set cc /usr/bin/clang
          sudo update-alternatives --set c++ /usr/bin/clang++
          sudo update-alternatives --config clang
          sudo update-alternatives --config clang++
          echo "OLD GCC VERSION"
          gcc --version
          echo "END"
          sudo apt install -y libstdc++6
          sudo apt upgrade
          sudo apt dist-upgrade
          export LD_LIBRARY_PATH=/usr/local/lib64:$LD_LIBRARY_PATH
          export CC=/usr/bin/clang
          export HOST_CC=/usr/bin/clang
          export CXX=/usr/bin/clang++
          # https://zhangboyi.gitlab.io/post/2020-09-14-resolve-dso-missing-from-command-line-error/
          export LDFLAGS="-Wl,--copy-dt-needed-entries"
          echo "CLANG VERSION"
          which clang
          clang -v
          rustc -vV
          cargo -vV
          echo "ENDPRINT"
          strings `which clang` | grep GLIBC
          echo "END2"
          echo "LDD VERSION"
          ldd --version
          echo "APT"
          sudo apt-cache policy libc6
          echo "UPDATE"
          sudo apt-get install libc6
          echo "NOW"
          ldd --version
          echo "END4"
          cargo build --release -vv
      - name: Bundle Windows
        if: matrix.build == 'windows-x64'
        shell: bash
        run: |
          cargo install cargo-wix
          cargo build --release
      - name: cargo wix
        if: matrix.build == 'windows-x64'
        shell: bash
        run: |
          cargo wix --no-build
          find target -type f -name "*"
      - name: Bundle Mac
        if: matrix.build == 'macos-x64'
        shell: bash
        run: scripts/mac/dmg.sh
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: target/release/dgb.deb
          retention-days: 2
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: macbuild/DigitalesGrundbuch.dmg
          retention-days: 2
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: target/wix/dgb-1.0.0-x86_64.msi
          retention-days: 2
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: 'dgb-windows-amd64-exe'
          path: target/release/dgb.exe
          retention-days: 2

  release:
    needs: [setup, build]
    runs-on: ubuntu-22.04
    if: github.event.inputs.release != ''
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.release }}
          release_name: Release ${{ github.event.inputs.release }}
          draft: true
          prerelease: false
      - name: Upload Release Asset Windows .exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/dgb-windows-amd64-exe/dgb.exe
          asset_name: dgb.exe
          asset_content_type: application/octet-stream
      - name: Upload Release Asset Windows .msi
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/dgb-windows-amd64/dgb-1.0.0-x86_64.msi
          asset_name: dgb.msi
          asset_content_type: application/octet-stream
      - name: Upload Release Asset Mac amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/dgb-darwin-amd64/DigitalesGrundbuch.dmg
          asset_name: dgb.dmg
          asset_content_type: application/octet-stream
