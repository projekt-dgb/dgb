name: Build

on:
  push:
    branches:
      - 'master'
    tags:
      # this is _not_ a regex, see: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - '[0-9]+.[0-9]+.[0-9]+*'
  pull_request:
  workflow_dispatch:
    inputs:
      release:
          description: 'Make release'

# Automatically cancel previous workflow runs when a new commit is pushed.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Set up
    runs-on: ubuntu-22.04
    outputs:
      VERSION: ${{ steps.setup.outputs.VERSION }}
      DOING_RELEASE: ${{ steps.setup.outputs.DOING_RELEASE }}
    steps:
      - name: Set up env vars
        id: setup
        shell: bash
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          DOING_RELEASE=$(echo $VERSION | grep -c '^[0-9]\+\.[0-9]\+\.[0-9]\+\(-\([a-zA-Z]\+\)\?[0-9]*\)\?$' || true)
          echo "DOING_RELEASE=${DOING_RELEASE}" >> $GITHUB_OUTPUT
          echo $VERSION
          echo $DOING_RELEASE

  build:
    name: Build on ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux-x64
            os: ubuntu-22.04
            artifact_name: 'dgb-linux-amd64'
          - build: macos-x64
            os: macos-11
            artifact_name: 'dgb-darwin-amd64'
          - build: windows-x64
            os: windows-2019
            artifact_name: 'dgb-windows-amd64'
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.67
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ matrix.build }}-${{ matrix.target }}-cargo-${{ hashFiles('Cargo.lock') }}-v1
      - uses: egorpugin/sw-action@master
        if: matrix.build == 'windows-x64'
      - name: Bundle Windows
        if: matrix.build == 'windows-x64'
        shell: bash
        run: |
          cargo install cargo-wix
          cargo wix --nocapture
      - name: Bundle Linux
        if: matrix.build == 'linux-x64'
        run: |
          sudo apt install pkg-config libgtk-3-dev libssl-dev cmake libsoup2.4-dev libwebkit2gtk-4.0-dev libjavascriptcoregtk-4.0-dev libayatana-appindicator3-dev
          sudo apt-get update -y
          sudo apt-get install -y --allow-downgrades libstdc++6 libtinfo5
          sudo apt-get install --reinstall g++
          cargo install cargo-deb
          cargo deb
      - name: Bundle Mac
        if: matrix.build == 'macos-x64'
        shell: bash
        run: scripts/mac/dmg.sh
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: macbuild/DigitalesGrundbuch.dmg
          retention-days: 2
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: target/release/dgb.deb
          retention-days: 2
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: target/release/dgb.msi
          retention-days: 2

  release:
    needs: [setup, build]
    runs-on: ubuntu-22.04
    if: needs.setup.outputs.DOING_RELEASE == '1' || github.event.inputs.release != ''
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.VERSION }}
          release_name: Release ${{ needs.setup.outputs.VERSION }}
          draft: true
          prerelease: false
