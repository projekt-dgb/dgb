{
  "regex": {
    "ALS_GESAMTBERECHTIGTE_1": ",? als Gesamtberechtigte gemäß § (\\d*) BGB -?",
    "AUFLOESEND_BEDINGT_1": "Das Recht ist auflösend bedingt",
    "AUSÜBUNG_1": "Die Ausübung (.*) darf Dritten überlassen werden",
    "BELASTETEN_GRUNDSTUECKE_1": "jetzt unter(.*)Nr. (.*) gebucht",
    "BINDESTRICH_1": "- ([[:lower:]])",
    "BINDESTRICH_2": "-\\nund",
    "EINGETRAGEN_AM_1": "ingetragen am (\\d\\d).(\\d\\d).(\\d\\d\\d\\d)",
    "EINGETRAGEN_AM_2": "ingetragen (.*) am (\\d\\d).(\\d\\d).(\\d\\d\\d\\d)",
    "EINGETRAGEN_AM_3": "(.*) eingetragen am (dd).(dd).(dddd)",
    "EINGETRAGEN_AM_3_1": "(.*)",
    "FLUR_FLURSTUECK_1": "Flur (\\d*) Flurstück (\\S*)",
    "FLUR_FLURSTUECK_2": "Flur (\\d*) Flst. (\\S*)",
    "FLUR_FLURSTUECK_3": "Flur (\\d*), Flst. (\\S*)",
    "FLUR_FLURSTUECK_4": "Flurstück (\\S*) der Flur (\\d*)",
    "FLUR_FLURSTUECK_5": "Flur (\\d*), Flurstück (\\S*)",
    "FLUR_FLURSTUECK_6": "Flur (\\d*), Flurstück (\\S*) und (\\S*)",
    "FLUR_FLURSTUECK_7": "Flur (\\d*), Flst. (\\S*) und (\\S*)",
    "FLUR_FLURSTUECK_BZGL_1": "\\((.*)BV-Nr.(.*)\\)",
    "GESAMTHAFT_1": "Gesamthaft besteht in (.*)",
    "GLEICHRANG_1": "(.*) im gleichen Rang mit (.*) eingetragen am (.*)",
    "GLEICHRANG_2": "(.*) im Gleichrang mit den Rechten (.*) eingetragen am (.*)",
    "GLEICHRANG_3": "(.*) im Gleichrang mit (.*) eingetragen am (.*)",
    "GLEICHRANG_4": "ingetragen (.*) im gleichen Rang mit (.*) am (.*)",
    "GLEICHRANG_5": "(.*) im Gleichrang mit (.*) am",
    "GRUNDSCHULD_1": "Grundschuld (.*) über (.*) für (.*)",
    "GRUNDSCHULD_2": "(.*) Grundschuld (.*) für (.*)",
    "HAT_RECHT_VOR_1": "(.*) hat Recht vor (.*)",
    "HAT_RECHT_VOR_2\n": "(.*) hat Rang vor (.*)",
    "IM_RANG_VOR_1": "(.*) im Rang vor (.*) eingetragen am (.*)",
    "IM_RANG_VOR_2": "(.*) im Rang vor (.*)",
    "KOMMA_1": ",(.*)",
    "LASTEND_AN_ANTEIL_1": "dem Anteil Abt. I Nr. (.*)",
    "LÖSCHBAR_BEI_TODESNACHWEIS_1": ",? löschbar bei Todesnachweis,?",
    "MIT_DEM_INHALT_DES_RECHTS_1": "mit dem Inhalt des Rechts Abteilung II Nr. (\\d*)",
    "NEU_EINGETRAGEN_1": "Nr\\. (\\S*)(.*)als Nr\\. (\\S*) neu eingetragen\n",
    "NEU_EINGETRAGEN_2": "Nummer (\\S*)(.*)als Nummer (\\S*) eingetragen\n",
    "NUR_LASTEND_AN_1": "Nur lastend an (.*):",
    "NUR_LASTEND_AN_2": "Nur lastend auf (.*):\n",
    "NUR_LASTEND_AN_3": "nur lastend an (.*) für",
    "NUR_LASTEND_AN_4": "nur lastend auf (.*) für",
    "UEBERTRAGEN_AM_1": "hierher übertragen am (\\d\\d).(\\d\\d).(\\d\\d\\d\\d)",
    "VERERBLICH_1": "Das Recht ist vererblich",
    "VERSELBSTSTÄNDIGT_1": "Aus(.*)Nr. (S*)(.*)verselbstständigt und als(.*)Nr. (S*) eingetragen",
    "VOLLSTRECKBAR_1": "(.)ollstreckbar gemäß (.*) ZPO",
    "VOLLSTRECKBAR_2": ",?(.)(.)ollstreckbar nach (.*)",
    "VON_AMTS_WEGEN_EINGETRAGEN_1": "Von Amts wegen eingetragen",
    "VON_BIS_1": "(\\d*)-(\\d*)",
    "WIDERSPRUCH_1": "Widerspruch (.*) zugunsten (.*) für (.*) gegen",
    "ZERLEGT_1": "Flurstück (\\d*) ist zerlegt in die Flurstücke (\\d*) und (\\d*)",
    "ÜBERTRAGEN_1": "Von Nr\\. (\\S*)\\W(.*)übertragen nach\n"
  },
  "abkuerzungen_script": [
    "[",
    "    \" Dr\",",
    "    \" Prof\",",
    "    \" Co\",",
    "    \" v\", ",
    "    \" URNr\", ",
    "    \" Abt\", ",
    "    \" Co\", ",
    "    \"bzlg\",",
    "    \" geb\", ",
    "    \" lfd\", ",
    "    \" Nr\", ",
    "]"
  ],
  "text_saubern_script": [
    "return recht.replace(\"G r u n d s c h u l d\", \"Grundschuld\")"
  ],
  "text_kuerzen_abt2_script": [
    "#",
    "# Irrelevante Sätze rausfiltern",
    "saetze = filter(lambda satz: not(re[\"AUSÜBUNG_1\"].matches(satz)), saetze)",
    "saetze = filter(lambda satz: not(re[\"VOLLSTRECKBAR_1\"].matches(satz)), saetze)",
    "saetze = filter(lambda satz: not(re[\"VOLLSTRECKBAR_2\"].matches(satz)), saetze)",
    "saetze = filter(lambda satz: not(re[\"VON_AMTS_WEGEN_EINGETRAGEN_1\"].matches(satz)), saetze)",
    "return \". \".join(saetze)"
  ],
  "text_kuerzen_abt3_script": [
    "return \". \".join(saetze)"
  ],
  "betrag_auslesen_script": [
    "return saetze[0]"
  ],
  "rechtsinhaber_auslesen_abt3_script": [
    "return saetze[1]"
  ],
  "rechtsinhaber_auslesen_abt2_script": [
    "return saetze[0]"
  ],
  "klassifiziere_rechteart": [
    "recht = \". \".join(saetze)",
    "leitungsrecht = [",
    "    \"Leitungsrecht\",",
    "    \"Leitungs-\",",
    "    \"Trinkwasserleitung\",",
    "    \"leitungsrecht\",",
    "    \"Ferngasleitungs\",",
    "    \"Kabelanlagenrecht\"",
    "]",
    "if any(l in recht for l in leitungsrecht):",
    "    if \"Gasleitungsrecht\" in recht:",
    "        return RechteArt.GasleitungGasreglerstationFerngasltg",
    "    elif \"Hochspannungsfreileitung\" in recht:",
    "        return RechteArt.Hochspannungsleitungsrecht",
    "    else:",
    "        return RechteArt.LeitungsOderAnlagenrecht",
    "if \"Kabelrecht\" in recht or \"Kabeltrassenrecht\" in recht:",
    "    return RechteArt.Kabelrecht",
    "if \"Wegerecht\" in recht:",
    "    return RechteArt.GehWegeFahrOderLeitungsrecht",
    "if \"Vormerkung zur Sicherung des Anspruchs auf Rückauflassung\" in recht:",
    "    return RechteArt.Rueckauflassungsvormerkung",
    "if \"Auflassungsvormerkung\" in recht:",
    "    return RechteArt.Auflassungsvormerkung",
    "if \"Vorkaufsrecht\" in recht or \"Eigentumsübertragungsvormerkung\" in recht:",
    "    return RechteArt.Vorkaufsrecht",
    "if \"Nießbrauch\" in recht:",
    "    return RechteArt.Niessbrauchrecht",
    "if \"Mitbenutzungsrecht\" in recht:",
    "    return RechteArt.Mitbenutzungsrecht",
    "if \"Widerspruch\" in recht:",
    "    return RechteArt.Widerspruch",
    "mit_dem_inhalt_des_rechts = re[\"MIT_DEM_INHALT_DES_RECHTS_1\"].find_in(recht, 0)",
    "if mit_dem_inhalt_des_rechts is not None:",
    "    return RechteArt.SpeziellVormerkung(int(float(mit_dem_inhalt_des_rechts)))",
    "benutzungsrecht = [",
    "    \"Benutzungsrecht\",",
    "    \"Benutzungs-\",",
    "    \"Benutzung-\",",
    "]",
    "if any(b in recht for b in benutzungsrecht):",
    "    return RechteArt.Benutzungsrecht",
    "raise Exception(\"Konnte RechteArt nicht auslesen\")"
  ],
  "klassifiziere_schuldenart": [
    "recht = \". \".join(saetze)",
    "stichwoerter = [",
    "    ('Grundschuld', SchuldenArt.Grundschuld),",
    "    ('Hypothek', SchuldenArt.Hypothek),",
    "    ('Rentenschuld', SchuldenArt.Rentenschuld),",
    "    ('Aufbauhypothek', SchuldenArt.Aufbauhypothek),",
    "    ('Sicherungshypothek', SchuldenArt.Sicherungshypothek),",
    "    ('Widerspruch', SchuldenArt.Widerspruch),",
    "    ('Arresthypothek', SchuldenArt.Arresthypothek),",
    "    ('Hoechstbetragshypothek', SchuldenArt.Hoechstbetragshypothek),",
    "    ('Sicherungsgrundschuld', SchuldenArt.Sicherungsgrundschuld),",
    "    ('Zwangssicherungshypothek', SchuldenArt.Zwangssicherungshypothek),",
    "]",
    "if \"Sicherungshypothek\" in recht:",
    "    if \"§128\" in recht:",
    "        return SchuldenArt.SicherungshypothekGem128ZVG",
    "    else:",
    "        return SchuldenArt.Sicherungshypothek",
    "else:",
    "    for k, v in stichwoerter:",
    "        if k in recht:",
    "            return v",
    "raise Exception(\"Konnte SchuldenArt nicht auslesen\")"
  ]
}
