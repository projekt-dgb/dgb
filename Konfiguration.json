{
  "spalten_ausblenden": false,
  "lefis_analyse_einblenden": false,
  "zeilenumbrueche_in_ocr_text": false,
  "vorschau_ohne_geroetet": false,
  "regex": {
    "ABT2_SATZ_1_BEVOR_KLAMMER_1": "(.*)\\((.*)\\)",
    "ALS_GESAMTBERECHTIGTE_1": "(.*),? als Gesamtberechtigte gemäß § (\\d*) BGB -?(.*)",
    "AMT_FÜR_1": "für (.*)mt für (.*)",
    "AUFLÖSEND_BEDINGT_1": "Das Recht ist auflösend bedingt",
    "AUSÜBUNG_1": "Die Ausübung (.*) darf Dritten überlassen werden",
    "BELASTETEN_GRUNDSTÜCKE_1": "jetzt unter(.*)Nr. (.*) gebucht",
    "BEZÜGLICH_BESCHRÄNKTE_1": "Bezüglich (.*):(.*)",
    "BEZÜGLICH_BESCHRÄNKTE_2": "Nur auf(.*):(.*)",
    "BINDESTRICH_2": "-\\nund",
    "BINDESTRICH_3": "(.*)-\\s([a-züäö])(.*)",
    "EINGETRAGEN_AM_1": "ingetragen am (\\d\\d).(\\d\\d).(\\d\\d\\d\\d)",
    "EINGETRAGEN_AM_2": "ingetragen (.*) am (\\d\\d).(\\d\\d).(\\d\\d\\d\\d)",
    "EINGETRAGEN_AM_3": "(.*) eingetragen am (dd).(dd).(dddd)",
    "EINGETRAGEN_AM_4": "(.*)eingetragen am(.*)",
    "EINGETRAGEN_AM_5": "(.*)am(.*)",
    "EINGETRAGEN_AM_6": "eingetragen am (\\d\\d).(\\d\\d).(\\d\\d\\d\\d)",
    "EUR_DOPPELT": "EUR \\((.*)Euro\\)",
    "FLUR_FLURSTUECK_1": "Flur (\\d*) Flurstück (\\S*)",
    "FLUR_FLURSTUECK_2": "Flur (\\d*) Flst. (\\S*)",
    "FLUR_FLURSTUECK_3": "Flur (\\d*), Flst. (\\S*)",
    "FLUR_FLURSTUECK_4": "Flurstück (\\S*) der Flur (\\d*)",
    "FLUR_FLURSTUECK_5": "Flur (\\d*), Flurstück (\\S*)",
    "FLUR_FLURSTUECK_6": "Flur (\\d*), Flurstück (\\S*) und (\\S*)",
    "FLUR_FLURSTUECK_7": "Flur (\\d*), Flst. (\\S*) und (\\S*)",
    "FLUR_FLURSTUECK_BZGL_1": "\\((.*)BV-Nr.(.*)\\)",
    "FOLGENDE_LAST_1": "Folgende Last: Nr. (\\d*):(.*)",
    "FÜR_1": "für (.*)",
    "GEMAESS_BEWILLIGUNG_1": "gemäß Bewilligung \\((.*)\\)",
    "GESAMTHAFT_1": "Gesamthaft besteht in (.*)",
    "GESTATTUNGSVERTRAG_1": "Gestattungsvertrag/(\\d\\d).(\\d\\d).(\\d\\d\\d\\d)",
    "GLEICHRANG_1": "ingetragen(.*)im gleichen Rang mit(.*)",
    "GLEICHRANG_2": "(.*)im gleichen Rang mit(.*)",
    "GLEICHRANG_3": "(.*)im Gleichrang mit den Rechten(.*)",
    "GLEICHRANG_4": "(.*)im Gleichrang mit(.*)",
    "GLEICHRANG_5": "(.*)im gleichen Rang wie das Recht(.*)",
    "GRUNDSCHULD_1": "Grundschuld (.*) über (.*) für (.*)",
    "GRUNDSCHULD_2": "(.*) Grundschuld (.*) für (.*)",
    "HAT_RECHT_VOR_1": "(.*) hat Recht vor (.*)",
    "HAT_RECHT_VOR_2\n": "(.*) hat Rang vor (.*)",
    "IM_RANG_VOR_1": "(.*) im Rang vor (.*) eingetragen am (.*)",
    "IM_RANG_VOR_2": "(.*) im Rang vor (.*)",
    "KOMMA_1": "(.*),(\\d\\d)",
    "KOMMA_2": "(.*)\\.(\\d\\d)",
    "LASTEND_AN_ANTEIL_1": "dem Anteil Abt. I Nr. (.*)",
    "LÖSCHBAR_BEI_TODESNACHWEIS_1": ",? löschbar bei Todesnachweis,?",
    "MIT_DEM_INHALT_DES_RECHTS_1": "mit dem Inhalt des Rechts Abteilung II Nr. (\\d*)",
    "MIT_DEM_INHALT_DES_RECHTS_2": "mit dem Inhalt des Rechts Abt. II Nr. (\\d*)",
    "MIT_DEM_INHALT_DES_RECHTS_3": "mit dem Inhalt des Rechtes Abt. II Nr. (\\d*)",
    "MIT_ZINSEN_1": "(.*) mit (.*)insen",
    "NEU_EINGETRAGEN_1": "Nr\\. (\\S*)(.*)als Nr\\. (\\S*) neu eingetragen",
    "NEU_EINGETRAGEN_2": "Nummer (\\S*)(.*)als Nummer (\\S*) eingetragen\n",
    "NUR_LASTEND_1": "nur lastend an Flur (\\d*) Flurstück ((?:\\d|/)*)",
    "NUR_LASTEND_10": "Nur lastend an (.*):",
    "NUR_LASTEND_11": "Gemarkung (\\w*), Flur (\\d*) Flurstück ((?:\\d|/)*)",
    "NUR_LASTEND_12": "nur lastend an Gemarkung (\\w*), Flur (\\d*) Flurstück ((?:\\d|/)*) für",
    "NUR_LASTEND_13": "nur lastend an Gemarkung (\\w*), Flur (\\d*) Flurstück ((?:\\d|/)*), für",
    "NUR_LASTEND_14": "Nur lastend an Flur (\\d*), Flst. ((?:\\d|/)*):",
    "NUR_LASTEND_15": "nur lastend an den Flurstücken ((?:\\d|/)*) und ((?:\\d|/)*) der Flur (\\d*) Gemarkung (\\w*)",
    "NUR_LASTEND_16": "Nur lastend am Flurstück ((?:\\d|/)*) der Flur (\\d):",
    "NUR_LASTEND_17": "Nur lastend an Flur (\\d), Flurstücke (.*):",
    "NUR_LASTEND_18": "nur lastend an (?:Gemarkung (\\w*),? Flur (\\d*) Flurstück (\\d*)(?:, )?(?: und )?)* für",
    "NUR_LASTEND_19": "nur lastend an (.*) für",
    "NUR_LASTEND_2": "nur lastend am Flurstück ((?:\\d|/)*)",
    "NUR_LASTEND_20": "Gemarkung (\\w*),? Flur (\\d*) Flurstück ((?:\\d|/)*)",
    "NUR_LASTEND_21": "Nur lastend an Flur (\\d*) Flurstück ((?:\\d|/)*) Gemarkung (\\w*):",
    "NUR_LASTEND_22": "Nur lastend an Flur (\\d*), Flurstück ((?:\\d|/)*)\\s?:",
    "NUR_LASTEND_23": "Nur lastend an Gemarkung (\\w*),? Flur (\\d*) Flurstücke ((?:\\d|/)*) und ((?:\\d|/)*):",
    "NUR_LASTEND_24": "Nur lastend an Gemarkung (\\w*),? Flur (\\d*) Flurstück ((?:\\d|/)*):",
    "NUR_LASTEND_25": "Nur lastend auf Flur (\\d),? Flurstück ((?:\\d|/)*) und ((?:\\d|/)*):",
    "NUR_LASTEND_26": "Nur lastend an Flurstücken ((?:\\d|/)*) und ((?:\\d|/)*) der Flur (\\d*) Gemarkung (\\w*):",
    "NUR_LASTEND_27": ", nur lastend an Gemarkung (\\w*) Flur (\\d*) Flurstück ((?:\\d|/)*),",
    "NUR_LASTEND_28": ", nur lastend auf dem Flurstück ((?:\\d|/)*) der Flur (\\d*) Gemarkung (\\w*) für",
    "NUR_LASTEND_29": "Nur lastend an Flur (\\d*), Flst. ((?:\\d|/)*)\\s?:",
    "NUR_LASTEND_3": "nur lastend an Flurstück ((?:\\d|/)*)",
    "NUR_LASTEND_30": "Nur lastend an Flur (\\d*) Flurstück ((?:\\d|/)*) \\(bzlg\\. BV-Nr\\. (\\d*)\\):",
    "NUR_LASTEND_31": "lastend auf dem Flurstück ((?:\\d|/)*) der Flur (\\d*) für",
    "NUR_LASTEND_32": "Bezüglich Grundstück lfd. Nr. (\\d*) lastend nur auf Flur (\\d*), Flurstück ((?:\\d|/)*):",
    "NUR_LASTEND_33": "Nur lastend auf Flur (\\d*), Flurstück ((?:\\d|/)*):",
    "NUR_LASTEND_34": "Bezüglich BV-Nr. (\\d*) nur lastend an Flur (\\d*), Flurstück ((?:\\d|/)*):",
    "NUR_LASTEND_35": "Nur lastend an Flur (\\d*),? Flst. ((?:\\d|/)*) der Gemarkung (\\w*):",
    "NUR_LASTEND_36": "Nur lastend an Flur (\\d*),? Flurstück ((?:\\d|/)*) der Gemarkung (\\w*):",
    "NUR_LASTEND_37": "(?:B|b)ezüglich BV-\\s?Nr\\.\\s? (\\d*) nur lastend an Flur (\\d*),?\\s?Flurstück ((?:\\d|/)*)",
    "NUR_LASTEND_38": "nur lastend an dem Flurstück ((?:\\d|/)*) der Flur (\\d*) Gemarkung (\\w*) für",
    "NUR_LASTEND_39": "Nur lastend auf dem Flurstück ((?:\\d|/)*) der Flur (\\d*)\\s?:",
    "NUR_LASTEND_4": "nur lastend an den Flurstücken ((?:\\d|/)*) und ((?:\\d|/)*) Flur (\\d*) Gemarkung (\\w*)",
    "NUR_LASTEND_40": "Nur lastend an Flur (\\d*), Flst. ((?:\\d|/)*) und Flur (\\d*), Flst. ((?:\\d|/)*)\\s?:",
    "NUR_LASTEND_41": "nur lastend auf dem Flurstück ((?:\\d|/)*) der Flur (\\d*) Gemarkung (\\w*) für",
    "NUR_LASTEND_42": "Nur lastend an Flur (\\d*), Flst. ((?:\\d|/)*) und ((?:\\d|/)*):",
    "NUR_LASTEND_43": "(?:nur )?lastend (?:nur )?(?:(?:auf dem)|(?:an dem)|(?:am)|(?:an)) Flurstück ((?:\\d|/)*) (?:der )?Flur (\\d*)(?:(?:,|\\s-))? (?:(?:für)|(?:mit))",
    "NUR_LASTEND_44": "(?:nur )?lastend (?:(?:auf dem)|(?:an dem)|(?:am)|(?:an)) Flurstück ((?:\\d|/)*) (?:der )?Flur (\\d*)(?:,)? Gemarkung (\\w*)(?:(?:,|\\s-))? (?:(?:für)|(?:mit))",
    "NUR_LASTEND_45": "nur lastend bezüglich (.*), für",
    "NUR_LASTEND_46": "(?:a|A)m Flurstück ((?:\\d|/)*) (?:der )?Flur (\\d*)",
    "NUR_LASTEND_47": "lastend nur am (.*) für",
    "NUR_LASTEND_48": "Nur lastend an (.*):",
    "NUR_LASTEND_49": "Gemarkung (\\w*),? Flur (\\d*) Flurstück(?:e)? ((?:\\d|/)*) \\(BV-Nr.\\s?(\\d*)\\)",
    "NUR_LASTEND_5": "nur lastend an Flur (\\d*) Flurstück ((?:\\d|/)*)",
    "NUR_LASTEND_50": "nur lastend an (.*) für",
    "NUR_LASTEND_51": "Nur lastend an (Gemarkung .*):",
    "NUR_LASTEND_52": "Gemarkung (\\w*),? Flur (\\d*) Flurstück(?:e)?(.*)",
    "NUR_LASTEND_53": "((?:\\d|/)*) \\(BV-Nr. (\\d*)\\)",
    "NUR_LASTEND_54": "Nur lastend an Gemarkung (\\w*),? Flur (\\d*) Flurstücke (.*):",
    "NUR_LASTEND_55": "Nur lastend an Gemarkung (\\w*),? Flur (\\d*) Flurstücke (\\d*),",
    "NUR_LASTEND_56": ",? nur lastend (.*)für",
    "NUR_LASTEND_57": "am Grundstück(.*)nur lastend",
    "NUR_LASTEND_58": "Nur(.*):",
    "NUR_LASTEND_59": "nur lastend (?:an dem)|(?:am) Flurstück ((?:\\d|/)*) der Flur (\\d*),? Gemarkung (\\w*) - für",
    "NUR_LASTEND_6": "Nur lastend an Flur (\\d*) Flurstück ((?:\\d|/)*)\\s?:",
    "NUR_LASTEND_61": "lastend auf den Flurstücken ((?:\\d|/)*), ((?:\\d|/)*) und ((?:\\d|/)*) der Flur (\\d*) für",
    "NUR_LASTEND_62": "nur lastend am Flurstück ((?:\\d|/)*) Flur (\\d*), für",
    "NUR_LASTEND_63": "nur lastend an Flurstück ((?:\\d|/)*) Flur (\\d*) Gemarkung (\\w*), für",
    "NUR_LASTEND_64": "Nur lastend an Gemarkung (\\w*), Flur (\\d*) Flurstück ((?:\\d|/)*), Gemarkung (\\w*), Flur (\\d*) Flurstück ((?:\\d|/)*) und Gemarkung (\\w*), Flur (\\d*) Flurstück ((?:\\d|/)*):",
    "NUR_LASTEND_65": "nur lastend am Flurstück ((?:\\d|/)*) Flur (\\d*) Gemarkung (\\w*), für",
    "NUR_LASTEND_66": "bezüglich des Grundstücks BV-Nr. (\\d*) nur lastend an Gemarkung (\\w*), Flur (\\d*) Flurstück ((?:\\d|/)*) für",
    "NUR_LASTEND_67": "am Grundstück BV-Nr. (\\d*) nur lastend am Flurstück ((?:\\d|/)*) Flur (\\d*) Gemarkung (\\w*), für",
    "NUR_LASTEND_68": "Am Grundstück BV-Nr. (\\d*) nur lastend an Flur (\\d*) Flurstück ((?:\\d|/)*):",
    "NUR_LASTEND_69": "am Grundstück lfd. Nr. (\\d*) des Bestandsverzeichnisses nur lastend an Flur (\\d*) Flurstück ((?:\\d|/)*), für",
    "NUR_LASTEND_7": "(?:n|N)ur lastend an Gemarkung (\\w*),? Flur (\\d*),? Flurstück ((?:\\d|/)*) und Gemarkung (\\w*),? Flur (\\d*),? Flurstück ((?:\\d|/)*)",
    "NUR_LASTEND_70": "nur lastend am Flurstück ((?:\\d|/)*) der Flur (\\d*) Gemarkung (\\w*) für",
    "NUR_LASTEND_71": "nur lastend am Flurstück ((?:\\d|/)*) der Flur (\\d*) Gemarkung (\\w*), für",
    "NUR_LASTEND_72": "nur lastend am Flurstück ((?:\\d|/)*) und ((?:\\d|/)*) der Flur (\\d*) Gemarkung (\\w*),? für",
    "NUR_LASTEND_73": "nur lastend an dem Flurstück ((?:\\d|/)*) der Flur (\\d*),? für",
    "NUR_LASTEND_74": "nur lastend an dem Flurstück ((?:\\d|/)*) der Flur (\\d*) Gemarkung (\\w*),? für",
    "NUR_LASTEND_75": "nur lastend am Flurstück ((?:\\d|/)*) Flur (\\d*), mit",
    "NUR_LASTEND_76": "nur lastend an Flur (\\d*) Flurstück ((?:\\d|/)*) und ((?:\\d|/)*),? für",
    "NUR_LASTEND_77": "nur lastend an Gemarkung (\\w*), Flur (\\d*) Flurstück ((?:\\d|/)*), ((?:\\d|/)*) und ((?:\\d|/)*),? für",
    "NUR_LASTEND_78": "nur lastend an Flur (\\d*) Flurstück ((?:\\d|/)*) Gemarkung (\\w*) für",
    "NUR_LASTEND_8": "Nur lastend an Flur (\\d*), Flurstück ((?:\\d|/)*) Gemarkung (\\w*):",
    "NUR_LASTEND_9": "Nur lastend an Gemarkung (\\w*) Flur (\\d*), Flurstück ((?:\\d|/)*):",
    "NUR_LASTEND_AN_1": "Nur lastend an (.*):",
    "NUR_LASTEND_AN_2": "Nur lastend auf (.*):\n",
    "NUR_LASTEND_AN_3": "nur lastend an (.*) für",
    "NUR_LASTEND_AN_4": "nur lastend auf (.*) für",
    "NUR_LASTEND_AUF_DEM_ANTEIL_1": "(.*)nur lastend auf dem Anteil Abt. I Nr. (.*) für(.*)",
    "NUR_LASTEND_AUF_DEM_ANTEIL_2": "Nur lastend auf dem Anteil Abt. I (.*):?\\s",
    "NUR_LASTEND_MITEIGENTUMSANTEIL": "nur lastend an(.*)Miteigentumsanteil",
    "NUR_LASTEND_TEIL_VON_1": "(\\d*) \\(Flst. (\\d*)\\)",
    "NUR_LASTEND_TEIL_VON_2": "\\(Flst. (\\d*)\\)",
    "SPALTE_1_TEIL_VON_1": "Teil von (\\d*)",
    "SPALTE_1_TEIL_VON_2": "(\\d*) teilweise",
    "UNTER_BEZUGNAHME_AUF_1": "(.*)unter Bezugnahme auf(.*)",
    "VERERBLICH_1": "Das Recht ist vererblich",
    "VERSELBSTSTÄNDIGT_1": "Aus(.*)Nr. (S*)(.*)verselbstständigt und als(.*)Nr. (S*) eingetragen",
    "VOLLSTRECKBAR_1": "(.)ollstreckbar gemäß (.*) ZPO",
    "VOLLSTRECKBAR_2": ",?(.)(.)ollstreckbar nach (.*)",
    "VOM_1": "(.*) vom (\\d\\d)\\s?\\.\\s?(\\d\\d)\\s?\\.\\s?(\\d\\d\\d\\d)(.*)",
    "VON_AMTS_WEGEN_EINGETRAGEN_1": "Von Amts wegen eingetragen",
    "VON_BIS_1": "(\\d*)-(\\d*)",
    "VORMERKUNG_BPD_1": "(.*)Vormerkung(.*)Dienstbarkeit(.*)Rechts Abteilung II Nr. (\\d*)(.*)",
    "VORMERKUNG_BPD_2": "(.*)Vormerkung(.*)Dienstbarkeit(.*)Rechts Abt. II Nr. (\\d*)(.*)",
    "WIDERSPRUCH_1": "Widerspruch (.*) zugunsten (.*) für (.*) gegen",
    "ZERLEGT_1": "Flurstück (\\d*) ist zerlegt in die Flurstücke (\\d*) und (\\d*)",
    "ZUGUNSTEN_1": "(.*)zugunsten(.*)",
    "ÜBERTRAGEN_1": "Von Nr\\. (\\S*)\\W(.*)übertragen nach\n",
    "ÜBERTRAGEN_AM_1": "hierher übertragen am (\\d\\d).(\\d\\d).(\\d\\d\\d\\d)"
  },
  "abkuerzungen_script": [
    "return [",
    "    \" Dr\",",
    "    \" Prof\",",
    "    \" Co\",",
    "    \" v\", ",
    "    \" u\", ",
    "    \" E\", # \"E. ON edis\"",
    "    \" URNr\", ",
    "    \" Abt\", ",
    "    \" gem\", ",
    "    \" tlw\",",
    "    \" Co\", ",
    "    \"bzw\",",
    "    \"bzlg\",",
    "    \" bzw\",",
    "    \" Dipl.-Kfm\",",
    "    \" geb\", ",
    "    \" lfd\", ",
    "    \" Nr\", ",
    "]"
  ],
  "text_saubern_script": [
    " ",
    "recht = recht.replace(\"G r u n d s c h u l d\", \"Grundschuld\")",
    "recht = recht.replace(\"o h n e\", \"ohne\")",
    "recht = recht.replace(\"B r i e f\", \"Brief\")",
    "recht = recht.replace(\"ü b e r\", \"über\")",
    "recht = recht.replace(\"f ü r\", \"für\")",
    "recht = recht.replace(\"d i e\", \"die\")",
    " ",
    "# Worte mit \"- \" vor diesen Worten ",
    "# sollten nicht zusammengeführt werden",
    "stop = set([\"und\", \"bzw.\", \"sowie\", \"u.\"])",
    "recht = \" \".join(recht.splitlines())",
    "worte = recht.split()",
    "worte_dict = {}",
    "for i in range(len(worte)):",
    "    worte_dict[i] = worte[i]",
    " ",
    "for i in range(len(worte)):",
    "    wort = worte_dict.get(i)",
    "    if wort is None:",
    "        continue",
    "    wort_next = worte_dict.get(i + 1)",
    "    if wort_next is None:",
    "        continue",
    "    if (wort.endswith(\"-\") and not(wort_next in stop or wort_next.istitle())):",
    "        worte_dict[i] = wort[:-1] + wort_next",
    "        worte_dict[i + 1] = \"\"",
    " ",
    "text_sauber = \"\"",
    " ",
    "for i in range(len(worte)):",
    "    text_sauber += worte_dict[i]",
    "    if i + 1 != len(worte):",
    "        text_sauber += \" \"",
    " ",
    "text_sauber = text_sauber.rstrip().lstrip()",
    " ",
    "text_sauber = \" \".join(text_sauber.split())",
    " ",
    "if text_sauber.startswith(\"- \"):",
    "    text_sauber = text_sauber.split(\"- \")[1]",
    "  ",
    "return text_sauber"
  ],
  "flurstuecke_auslesen_script": [
    " ",
    "eintraege = []",
    " ",
    "spalte_1 = spalte_1.replace(\"v.\", \"von\")",
    "spalte_1 = spalte_1.replace(\"tlw.\", \"teilweise\")",
    "spalte_1 = spalte_1.replace(\",\", \" \")",
    " ",
    "text = re[\"NUR_LASTEND_AUF_DEM_ANTEIL_1\"].replace_all(text, \"$1für$3\")",
    "text = re[\"NUR_LASTEND_AUF_DEM_ANTEIL_2\"].replace_all(text, \"\")",
    "text = re[\"NUR_LASTEND_MITEIGENTUMSANTEIL\"].replace_all(text, \"\")",
    " ",
    "bv_nr_flurstueck_beschraenkung = {}",
    " ",
    "# Teilbelastungen aus Spalte 1 auslesen",
    "# \"X (Flst. Y)\"",
    "regex = re[\"NUR_LASTEND_TEIL_VON_1\"]",
    "flst_von_nr = regex.find_all(spalte_1)",
    "for teilbelastung in flst_von_nr:",
    "    bv_nr = int(float(regex.find_in(teilbelastung, 0)))",
    "    flst_belastet = regex.find_in(teilbelastung, 1)",
    "    bv_nr_flurstueck_beschraenkung.setdefault(bv_nr, []).append(flst_belastet)",
    " ",
    "spalte_1 = re[\"NUR_LASTEND_TEIL_VON_2\"].replace_all(spalte_1, \"\")",
    "spalte_1 = spalte_1.rstrip().lstrip()",
    " ",
    "# Teilbelastungen aus Spalte 1 auslesen",
    "# \"Teil von X\"",
    "regex = re[\"SPALTE_1_TEIL_VON_1\"]",
    "teil_von = regex.find_all(spalte_1)",
    "  ",
    "for teilbelastung in teil_von:",
    "    lfd_nr = int(float(regex.find_in(teilbelastung, 0)))",
    "    nur_flst_belastet = bv_nr_flurstueck_beschraenkung.get(lfd_nr)",
    "    if nur_flst_belastet is None:",
    "        eintraege.append(Spalte1Eintrag(lfd_nr, False))",
    "    else:",
    "        flst_teil = []",
    "        for f in nur_flst_belastet:",
    "            flst_teil.append(FlurFlurstueck(0, f))",
    "        eintraege.append(Spalte1Eintrag(lfd_nr, False, flst_teil))",
    " ",
    "spalte_1 = regex.replace_all(spalte_1, \"\")",
    "spalte_1 = spalte_1.rstrip().lstrip()",
    " ",
    "# \"X tlw.\" auslesen",
    "regex2 = re[\"SPALTE_1_TEIL_VON_2\"]",
    "teil_von = regex2.find_all(spalte_1)",
    " ",
    "for teilbelastung in teil_von:",
    "    lfd_nr = int(float(regex2.find_in(teilbelastung, 0)))",
    "    eintraege.append(Spalte1Eintrag(lfd_nr, False))",
    " ",
    "spalte_1 = regex2.replace_all(spalte_1, \"\")",
    "spalte_1 = spalte_1.rstrip().lstrip()",
    "  ",
    "# Vollbelastungen aus Spalte 1 auslesen",
    "for vollbelastung in spalte_1.split():",
    "    range_split = vollbelastung.split(\"-\")",
    "    if (len(range_split) == 2):",
    "        lfd_nr_start = int(float(range_split[0].rstrip().lstrip()))",
    "        lfd_nr_end = int(float(range_split[1].rstrip().lstrip()))",
    "        for i in range(lfd_nr_start, lfd_nr_end):",
    "            eintraege.append(Spalte1Eintrag(i, True))",
    "    else:",
    "        lfd_nr = int(float(vollbelastung))",
    "        eintraege.append(Spalte1Eintrag(lfd_nr, True))",
    " ",
    "if \"lastend\" in text or \"lastet an\" in text or \"nur auf\" in text or \"nur an\" in text:",
    "    pass",
    "else:",
    "    return eintraege",
    " ",
    "# Variationen von Teilbelastungen aus dem Rechtstext auslesen",
    "# z.B. \"nur lastend an Flurstück X Flur Y Gemarkung Z\",",
    "#      \"nur lastend an dem Flurstück X Flur Y, der Gemarkung Z\",",
    "#      \"nur lastend auf dem Flurstück X, XX der Flur Y, alle in der Gemarkung Z\",",
    "# etc.",
    " ",
    "# Map \"bezüglich Bv Nr. X\" (int) => [FlurFlurstueck]",
    "flur_flurstuecke = {}",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_78\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    "",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_77\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flurstueck_1 = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flurstueck_2 = nur_lastend_an_regex.find_in(nur_lastend, 3)",
    "    flurstueck_3 = nur_lastend_an_regex.find_in(nur_lastend, 4)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_1, gemarkung))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_2, gemarkung))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_3, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_76\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck_1 = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flurstueck_2 = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_1))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_2))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_75\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_73\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_74\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_72\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck_1 = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flurstueck_2 = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 2)))",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 3)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_1, gemarkung))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_2, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_71\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_70\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_69\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    bv_nr = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(bv_nr, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_68\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    bv_nr = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flur_flurstuecke.setdefault(bv_nr, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_67\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    bv_nr = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 2)))",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 3)",
    "    flur_flurstuecke.setdefault(bv_nr, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_66\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    bv_nr = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 2)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 3)",
    "    flur_flurstuecke.setdefault(bv_nr, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "if re[\"NUR_LASTEND_55\"].matches(text):",
    "    nur_lastend_an_regex = re[\"NUR_LASTEND_54\"]",
    "    should_replace = False",
    "    for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "        gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "        flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1))) ",
    "        flurstuecke = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "        flurstuecke = flurstuecke.replace(\"und\", \" \")",
    "        flurstuecke = flurstuecke.replace(\",\", \" \")",
    "        for f in flurstuecke.split():",
    "            flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, f, gemarkung))",
    "            should_replace = True",
    "    if should_replace:",
    "        text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_50\"]",
    "should_replace = False",
    "for nur_lastend in nur_lastend_an_regex.find_all(text): ",
    "    for gemarkung_split in nur_lastend.split(\"Gemarkung \")[1:]:",
    "        gemarkung_split = \"Gemarkung \" + gemarkung_split",
    "        find_all_20 = re[\"NUR_LASTEND_20\"].find_all(gemarkung_split)",
    "        if (len(find_all_20) > 0):",
    "            for capture in find_all_20:",
    "                gemarkung = re[\"NUR_LASTEND_20\"].find_in(capture, 0)",
    "                flur = int(float(re[\"NUR_LASTEND_20\"].find_in(capture, 1)))",
    "                flurstueck = re[\"NUR_LASTEND_20\"].find_in(capture, 2)",
    "                flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "                should_replace = True",
    "        else:",
    "            for capture in re[\"NUR_LASTEND_52\"].find_all(gemarkung_split):",
    "                gemarkung = re[\"NUR_LASTEND_52\"].find_in(gemarkung_split, 0)",
    "                flur = int(float(re[\"NUR_LASTEND_52\"].find_in(gemarkung_split, 1))) ",
    "                for flurstueck_capture in re[\"NUR_LASTEND_53\"].find_all(capture):",
    "                    flurstueck = re[\"NUR_LASTEND_53\"].find_in(flurstueck_capture, 0)",
    "                    bv_nr = int(float(re[\"NUR_LASTEND_53\"].find_in(flurstueck_capture, 1)))",
    "                    flur_flurstuecke.setdefault(bv_nr, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "                    should_replace = True",
    "if should_replace:",
    "    text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_51\"]",
    "should_replace = False",
    "for nur_lastend in nur_lastend_an_regex.find_all(text): ",
    "    for gemarkung_split in nur_lastend.split(\"Gemarkung \")[1:]:",
    "        gemarkung_split = \"Gemarkung \" + gemarkung_split",
    "        for capture in re[\"NUR_LASTEND_52\"].find_all(gemarkung_split):",
    "            gemarkung = re[\"NUR_LASTEND_52\"].find_in(gemarkung_split, 0)",
    "            flur = int(float(re[\"NUR_LASTEND_52\"].find_in(gemarkung_split, 1))) ",
    "            for flurstueck_capture in re[\"NUR_LASTEND_53\"].find_all(capture):",
    "                flurstueck = re[\"NUR_LASTEND_53\"].find_in(flurstueck_capture, 0)",
    "                bv_nr = int(float(re[\"NUR_LASTEND_53\"].find_in(flurstueck_capture, 1)))",
    "                flur_flurstuecke.setdefault(bv_nr, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "                should_replace = True",
    "if should_replace:",
    "    text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_47\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    regex_inner = re[\"NUR_LASTEND_46\"]",
    "    for teil in regex_inner.find_all(nur_lastend):",
    "        flurstueck = regex_inner.find_in(teil, 0)",
    "        flur = int(float(regex_inner.find_in(teil, 1)))",
    "        flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_64\"] ",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    " ",
    "    gemarkung_1 = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur_1 = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flurstueck_1 = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    " ",
    "    gemarkung_2 = nur_lastend_an_regex.find_in(nur_lastend, 3)",
    "    flur_2 = int(float(nur_lastend_an_regex.find_in(nur_lastend, 4)))",
    "    flurstueck_2 = nur_lastend_an_regex.find_in(nur_lastend, 5)",
    " ",
    "    gemarkung_3 = nur_lastend_an_regex.find_in(nur_lastend, 6)",
    "    flur_3 = int(float(nur_lastend_an_regex.find_in(nur_lastend, 7)))",
    "    flurstueck_3 = nur_lastend_an_regex.find_in(nur_lastend, 8)",
    " ",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur_1, flurstueck_1, gemarkung_1))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur_2, flurstueck_2, gemarkung_2))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur_3, flurstueck_3, gemarkung_3))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_65\"] ",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_63\"] ",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_62\"] ",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_44\"] ",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_45\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    regex_inner = re[\"NUR_LASTEND_46\"]",
    "    for teil in regex_inner.find_all(nur_lastend):",
    "        flurstueck = regex_inner.find_in(teil, 0)",
    "        flur = int(float(regex_inner.find_in(teil, 1)))",
    "        flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_43\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_42\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck_1 = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flurstueck_2 = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_1))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_2))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_41\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_61\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck_1 = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flurstueck_2 = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flurstueck_3 = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 3)))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_1))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_2))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_3))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_40\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur_1 = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck_1 = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flur_2 = int(float(nur_lastend_an_regex.find_in(nur_lastend, 2)))",
    "    flurstueck_2 = nur_lastend_an_regex.find_in(nur_lastend, 3)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur_1, flurstueck_1))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur_2, flurstueck_2))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_39\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_38\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_37\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    bv_nr = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(bv_nr, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_36\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_35\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_34\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    bv_nr = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flur_flurstuecke.setdefault(bv_nr, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_33\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_32\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    bv_nr = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flur_flurstuecke.setdefault(bv_nr, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_31\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_30\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    bv_nr = int(float(nur_lastend_an_regex.find_in(nur_lastend, 2)))",
    "    flur_flurstuecke.setdefault(bv_nr, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_29\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_28\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_27\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_26\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 2)))",
    "    flurstueck_1 = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flurstueck_2 = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 3)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_1, gemarkung))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_2, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_25\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck_1 = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flurstueck_2 = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_1))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_2))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_24\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_23\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flurstueck_1 = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flurstueck_2 = nur_lastend_an_regex.find_in(nur_lastend, 3)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_1, gemarkung))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_2, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_22\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_21\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "if re[\"NUR_LASTEND_18\"].matches(text):",
    "    capture_text = re[\"NUR_LASTEND_19\"].find_in(text, 0)",
    "    for nur_lastend in re[\"NUR_LASTEND_20\"].find_all(capture_text):",
    "        gemarkung = re[\"NUR_LASTEND_20\"].find_in(nur_lastend, 0)",
    "        flur = int(float(re[\"NUR_LASTEND_20\"].find_in(nur_lastend, 1)))",
    "        flurstueck = re[\"NUR_LASTEND_20\"].find_in(nur_lastend, 2)",
    "        flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_17\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstuecke = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flurstuecke = flurstuecke.replace(\"und\", \" \").replace(\",\", \" \").split()",
    "    for f in flurstuecke:",
    "        flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, f))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_16\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_15\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck_1 = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flurstueck_2 = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 2)))",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 3)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_1, gemarkung))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_2, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_14\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_13\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_12\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_9\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_8\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_7\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    gemarkung_1 = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur_1 = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flurstueck_1 = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur_1, flurstueck_1, gemarkung_1))",
    " ",
    "    gemarkung_2 = nur_lastend_an_regex.find_in(nur_lastend, 3)",
    "    flur_2 = int(float(nur_lastend_an_regex.find_in(nur_lastend, 4)))",
    "    flurstueck_2 = nur_lastend_an_regex.find_in(nur_lastend, 5)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur_2, flurstueck_2, gemarkung_2))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_6\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_5\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 0)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_4\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 3)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 2)))",
    "    flurstueck_1 = nur_lastend_an_regex.find_in(nur_lastend, 1)",
    "    flurstueck_2 = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_1, gemarkung))",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck_2, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_1\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    gemarkung = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur = int(float(nur_lastend_an_regex.find_in(nur_lastend, 1)))",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 2)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_2\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(0, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_3\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    flurstueck = nur_lastend_an_regex.find_in(nur_lastend, 0)",
    "    flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(0, flurstueck))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    " ",
    "nur_lastend_an_regex = re[\"NUR_LASTEND_10\"]",
    "for nur_lastend in nur_lastend_an_regex.find_all(text):",
    "    if re[\"NUR_LASTEND_11\"].matches(nur_lastend):",
    "        gemarkung = re[\"NUR_LASTEND_11\"].find_in(nur_lastend, 0)",
    "        flur = int(float(re[\"NUR_LASTEND_11\"].find_in(nur_lastend, 1)))",
    "        flurstueck = re[\"NUR_LASTEND_11\"].find_in(nur_lastend, 2)",
    "        flur_flurstuecke.setdefault(0, []).append(FlurFlurstueck(flur, flurstueck, gemarkung))",
    "text = nur_lastend_an_regex.replace_all(text, \"\")",
    " ",
    "if len(flur_flurstuecke) == 0: ",
    "    raise Exception(\"'nur lastend an' in Text, konnte aber Flur / Flurstück nicht auslesen\")",
    " ",
    "for bv_nr in flur_flurstuecke.keys():",
    "    bv_pos = None",
    "    for e_idx, e in enumerate(eintraege):",
    "        if e.get_lfd_nr() == bv_nr:",
    "            bv_pos = e_idx",
    "            break",
    "    if bv_pos is None:",
    "        bv_pos = len(eintraege)",
    "        eintraege.append(Spalte1Eintrag(bv_nr, False))",
    "    eintraege[bv_pos].append_nur_lastend_an(flur_flurstuecke[bv_nr])",
    " ",
    "return eintraege"
  ],
  "text_kuerzen_abt2_script": [
    " ",
    "erster_satz = saetze[0]",
    "erster_satz = erster_satz.rstrip().lstrip()",
    " ",
    "if re[\"BEZÜGLICH_BESCHRÄNKTE_1\"].matches(erster_satz):",
    "    erster_satz = re[\"BEZÜGLICH_BESCHRÄNKTE_1\"].replace_all(erster_satz, \"$2\")",
    "if re[\"BEZÜGLICH_BESCHRÄNKTE_2\"].matches(erster_satz):",
    "    erster_satz = re[\"BEZÜGLICH_BESCHRÄNKTE_2\"].replace_all(erster_satz, \"$2\")",
    "if re[\"NUR_LASTEND_58\"].matches(erster_satz):",
    "    erster_satz = re[\"NUR_LASTEND_58\"].replace_all(erster_satz, \"\")",
    "if re[\"NUR_LASTEND_57\"].matches(erster_satz):",
    "    erster_satz = re[\"NUR_LASTEND_57\"].replace_all(erster_satz, \" nur lastend\")",
    "if re[\"NUR_LASTEND_56\"].matches(erster_satz):",
    "    erster_satz = re[\"NUR_LASTEND_56\"].replace_all(erster_satz, \" für\")",
    " ",
    "if re[\"EUR_DOPPELT\"].matches(erster_satz):",
    "    erster_satz = re[\"EUR_DOPPELT\"].replace_all(erster_satz, \"EUR\")",
    "if re[\"FOLGENDE_LAST_1\"].matches(erster_satz):",
    "    erster_satz = re[\"FOLGENDE_LAST_1\"].replace_all(erster_satz, \"$2\")",
    "if re[\"NUR_LASTEND_AN_1\"].matches(erster_satz):",
    "    erster_satz = re[\"NUR_LASTEND_AN_1\"].replace_all(erster_satz, \"\")",
    "if re[\"NUR_LASTEND_AN_2\"].matches(erster_satz):",
    "    erster_satz = re[\"NUR_LASTEND_AN_2\"].replace_all(erster_satz, \"\")",
    "if re[\"NUR_LASTEND_AN_3\"].matches(erster_satz):",
    "    erster_satz = re[\"NUR_LASTEND_AN_3\"].replace_all(erster_satz, \"für\")",
    "if re[\"NUR_LASTEND_AN_4\"].matches(erster_satz):",
    "    erster_satz = re[\"NUR_LASTEND_AN_4\"].replace_all(erster_satz, \"für\")",
    " ",
    "if \" gemäß § 1093 BGB\" in erster_satz:",
    "    erster_satz = erster_satz.replace(\" gemäß § 1093 BGB\", \"\")",
    "if \" gemäß § 63 Absatz 2 Landwirtschaftsanpassungsgesetz\" in erster_satz:",
    "    erster_satz = erster_satz.replace(\" gemäß § 63 Absatz 2 Landwirtschaftsanpassungsgesetz\", \"\")",
    "if \" in Verbindung mit § 52 Absatz 3 Flurbereinigungsgesetz\" in erster_satz:",
    "    erster_satz = erster_satz.replace(\" in Verbindung mit § 52 Absatz 3 Flurbereinigungsgesetz\", \"\")",
    "if \" (gem. § 16 FlurbG)\" in erster_satz:",
    "    erster_satz = erster_satz.replace(\" (gem. § 16 FlurbG)\", \"\")",
    "if \" gemäß § 3 Abs. 10 des Ausgleichsleistungsgesetzes\" in erster_satz:",
    "    erster_satz = erster_satz.replace(\" gemäß § 3 Abs. 10 des Ausgleichsleistungsgesetzes\", \"\")",
    " ",
    "erster_satz = erster_satz.rstrip().lstrip()",
    " ",
    "if erster_satz.startswith(\"Beschränkte persönliche Dienstbarkeit\"):",
    "    erster_satz = erster_satz.replace(\"Beschränkte persönliche Dienstbarkeit\", \"BpD\")",
    " ",
    "if erster_satz.startswith(\"Eine beschränkte persönliche Dienstbarkeit\"):",
    "    erster_satz = erster_satz.replace(\"Eine beschränkte persönliche Dienstbarkeit\", \"BpD\")",
    " ",
    "erster_satz = erster_satz.rstrip().lstrip()",
    " ",
    "if re[\"VORMERKUNG_BPD_1\"].matches(erster_satz):",
    "    erster_satz = re[\"VORMERKUNG_BPD_1\"].replace_all(erster_satz, \"Vormerkung BpD mit dem Inhalt des Rechts Abt. II Nr. $4$5\")",
    " ",
    "if re[\"VORMERKUNG_BPD_2\"].matches(erster_satz):",
    "    erster_satz = re[\"VORMERKUNG_BPD_2\"].replace_all(erster_satz, \"Vormerkung BpD mit dem Inhalt des Rechts Abt. II Nr. $4$5\")",
    " ",
    "if \"Vormerkung zur Sicherung des Anspruchs auf Eintragung einer beschränkt persönlichen Dienstbarkeit\" in erster_satz:",
    "    erster_satz = erster_satz.replace(\"Vormerkung zur Sicherung des Anspruchs auf Eintragung einer beschränkt persönlichen Dienstbarkeit\", \"Vomerkung BpD\")",
    " ",
    "if \"(Finanzierungs-)Gläubiger\" in erster_satz:",
    "    erster_satz = erster_satz.replace(\"(Finanzierungs-)Gläubiger\", \"Gläubiger\")",
    "if \" als Gesamtberechtigte gemäß § 428 BGB\" in erster_satz:",
    "    erster_satz = erster_satz.replace(\" als Gesamtberechtigte gemäß § 428 BGB\", \"\")",
    " ",
    "if \"Vorgemerkt gemäß § 883 BGB: Beschränkte persönliche Dienstbarkeit\" in erster_satz:",
    "    erster_satz = erster_satz.replace(\"Vorgemerkt gemäß § 883 BGB: Beschränkte persönliche Dienstbarkeit\", \"Vorgemerkt gemäß § 883 BGB: BpD\")",
    "if \"eingetragen und beim herrschenden Grundstück gemäß § 9 GBO vermerkt\" in erster_satz:",
    "    erster_satz = erster_satz.replace(\" und beim herrschenden Grundstück gemäß § 9 GBO vermerkt\", \"\")",
    "",
    "",
    "erster_satz = erster_satz.rstrip().lstrip()",
    " ",
    "if \"unter Bezugnahme\" in erster_satz:",
    "    erster_satz = erster_satz.split(\"unter Bezugnahme\")[0]",
    " ",
    "erster_satz = erster_satz.rstrip().lstrip()",
    " ",
    "if re[\"VOM_1\"].matches(erster_satz):",
    "    erster_satz = re[\"VOM_1\"].find_in(erster_satz, 0) + re[\"VOM_1\"].find_in(erster_satz, 4)",
    " ",
    "if erster_satz.endswith(\",\"):",
    "    erster_satz = erster_satz[:-1]",
    " ",
    "if erster_satz.startswith(\"Ein Vorkaufsrecht\"):",
    "    erster_satz = erster_satz[4:]",
    " ",
    "if re[\"GESTATTUNGSVERTRAG_1\"].matches(erster_satz):",
    "    erster_satz = re[\"GESTATTUNGSVERTRAG_1\"].replace_all(erster_satz, \"Gestattungsvertrag\")",
    "if re[\"GEMAESS_BEWILLIGUNG_1\"].matches(erster_satz):",
    "    erster_satz = re[\"GEMAESS_BEWILLIGUNG_1\"].replace_all(erster_satz, \"\")",
    "if re[\"EINGETRAGEN_AM_6\"].matches(erster_satz):",
    "    erster_satz = re[\"EINGETRAGEN_AM_6\"].replace_all(erster_satz, \"\")",
    " ",
    "if not(rangvermerk in erster_satz):",
    "    erster_satz = erster_satz + \" \" + rangvermerk",
    " ",
    "return erster_satz + \".\""
  ],
  "text_kuerzen_abt3_script": [
    " ",
    "gesamthaft = []",
    "for s in saetze:",
    "    if \"Gesamthaft\" in s:",
    "        gesamthaft.append(s)",
    " ",
    "if schuldenart == \"\" or betrag == \"\":",
    "    return \"\"",
    " ",
    "gekuerzt = schuldenart + \" über \" + betrag + \" für \" + rechtsinhaber",
    " ",
    "if len(gesamthaft) > 0:",
    "    gekuerzt += \". \"",
    "    gekuerzt += \". \".join(gesamthaft)",
    " ",
    "return gekuerzt + \".\""
  ],
  "betrag_auslesen_script": [
    " ",
    "recht = saetze[0]",
    " ",
    "waehrungen = [",
    "    (' EUR', Waehrung.Euro),",
    "    (' Euro', Waehrung.Euro),",
    "    (' €', Waehrung.Euro),",
    "    (' Deutsche Mark', Waehrung.DMark),",
    "    (' DM', Waehrung.DMark),",
    "    (' Mark', Waehrung.MarkDDR),",
    "    (' M', Waehrung.MarkDDR),",
    "    (' Goldmark', Waehrung.Goldmark),",
    "    (' GM', Waehrung.Goldmark),",
    "    (' Reichsmark', Waehrung.Reichsmark),",
    "    (' RM', Waehrung.Reichsmark),",
    "    (' Rentenmark', Waehrung.Rentenmark),",
    "    (' GF', Waehrung.GrammFeingold),",
    "    (' Gramm Feingold', Waehrung.GrammFeingold),",
    "]",
    " ",
    "waehrung = None",
    "for k, v in waehrungen:",
    "    if k in recht:",
    "        waehrung = v",
    " ",
    "if waehrung is None:",
    "    raise Exception(\"Konnte Währung nicht auslesen\")",
    " ",
    "for k, v in waehrungen:",
    "    recht = recht.replace(k, \"\")",
    " ",
    "recht = recht.rstrip().lstrip()",
    " ",
    "nachkomma = 0",
    "if re[\"KOMMA_1\"].matches(recht):",
    "    nachkomma = int(float(re[\"KOMMA_1\"].find_in(recht, 1)))",
    "    recht = re[\"KOMMA_1\"].replace_all(recht, \"$1\")",
    "elif re[\"KOMMA_2\"].matches(recht):",
    "    nachkomma = int(float(re[\"KOMMA_2\"].find_in(recht, 1)))",
    "    recht = re[\"KOMMA_2\"].replace_all(recht, \"$1\")",
    " ",
    "recht = recht.rstrip().lstrip()",
    "recht = recht.replace(\".\", \"\")",
    "recht = recht.replace(\",\", \"\")",
    "",
    "wert = int(float(recht))",
    "return Betrag(wert, nachkomma, waehrung)"
  ],
  "rechtsinhaber_auslesen_abt3_script": [
    " ",
    "recht = saetze[0].replace(\"für die Dauer\", \"\", 1)",
    "inhaber = None",
    " ",
    "if re[\"ZUGUNSTEN_1\"].matches(recht):",
    "    # \"Widerspruch für XXX zugunsten YYY\" - YYY ist der Rechteinhaber, nicht XXX",
    "    inhaber = re[\"ZUGUNSTEN_1\"].find_in(recht, 1)",
    "# \"[RechteArt] für das Landesamt für XXX\"",
    "elif \"amt für\" in recht.lower():",
    "    inhaber = re[\"AMT_FÜR_1\"].find_in(recht, 0) + \"mt für \" + re[\"AMT_FÜR_1\"].find_in(recht, 1)",
    "else:",
    "    inhaber = re[\"FÜR_1\"].find_in(recht, 0)",
    "",
    "if inhaber is None:",
    "    return \"\"",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    " ",
    " ",
    "if re[\"ALS_GESAMTBERECHTIGTE_1\"].matches(inhaber):",
    "    inhaber = re[\"ALS_GESAMTBERECHTIGTE_1\"].replace_all(inhaber, \"$1$3\")",
    " ",
    "if inhaber.endswith(\",\"):",
    "    inhaber = inhaber[:-1]",
    " ",
    "if not(\"amt\" in inhaber.lower()):",
    "    if \"einen noch zu benennenden Dritten\" in inhaber:",
    "        inhaber = \"einen noch zu benennenden Dritten\"",
    "    elif \"für \" in inhaber:",
    "        inhaber = inhaber.split(\"für \")[-1]",
    "        inhaber = inhaber.rstrip().lstrip()",
    "elif \"für das Landes\" in inhaber:",
    "    inhaber = \"Landes\" + inhaber.split(\"für das Landes\")[1]",
    " ",
    "inhaber = re[\"ALS_GESAMTBERECHTIGTE_1\"].replace_all(inhaber, \"\")",
    "inhaber = re[\"LÖSCHBAR_BEI_TODESNACHWEIS_1\"].replace_all(inhaber, \"\")",
    "inhaber = re[\"VOLLSTRECKBAR_2\"].replace_all(inhaber, \"\")",
    " ",
    "if re[\"UNTER_BEZUGNAHME_AUF_1\"].matches(inhaber):",
    "    inhaber = re[\"UNTER_BEZUGNAHME_AUF_1\"].find_in(inhaber, 0)",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    " ",
    "if \" auf Grund \" in inhaber:",
    "    inhaber = inhaber.split(\" auf Grund \")[0]",
    "if \", gemäß\" in inhaber:",
    "    inhaber = inhaber.split(\", gemäß\")[0]",
    "if \";  gemäß\" in inhaber:",
    "    inhaber = inhaber.split(\";  gemäß\")[0]",
    "if \" gemäß \" in inhaber:",
    "    inhaber = inhaber.split(\" gemäß \")[0]",
    "if \", nur lastend\" in inhaber:",
    "    inhaber = inhaber.split(\", nur lastend\")[0]",
    "if \" gegen \" in inhaber:",
    "    inhaber = inhaber.split(\" gegen \")[0]",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    " ",
    "for s in [\"die\", \"der\", \"den\", \"das\", \"dem\", \"den\", \"des\", \"der\", \"Berechtigten\", \"Die\", \"die\"]:",
    "    if inhaber.startswith(s):",
    "        inhaber = inhaber.replace(s, \"\", 1)",
    "        inhaber = inhaber.rstrip().lstrip()",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    " ",
    "return inhaber"
  ],
  "rechtsinhaber_auslesen_abt2_script": [
    " ",
    "recht = saetze[0].replace(\"für die Dauer\", \"\", 1)",
    "inhaber = None",
    " ",
    "if re[\"ZUGUNSTEN_1\"].matches(recht):",
    "    # \"Widerspruch für XXX zugunsten YYY\" - YYY ist der Rechteinhaber, nicht XXX",
    "    inhaber = re[\"ZUGUNSTEN_1\"].find_in(recht, 1)",
    "# \"[RechteArt] für das Landesamt für XXX\"",
    "elif \"amt für\" in recht.lower():",
    "    inhaber = re[\"AMT_FÜR_1\"].find_in(recht, 0) + \"mt für \" + re[\"AMT_FÜR_1\"].find_in(recht, 1)",
    "else:",
    "    inhaber = re[\"FÜR_1\"].find_in(recht, 0)",
    " ",
    "if inhaber is None:",
    "    return \"\"",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    " ",
    " ",
    "if re[\"ALS_GESAMTBERECHTIGTE_1\"].matches(inhaber):",
    "    inhaber = re[\"ALS_GESAMTBERECHTIGTE_1\"].replace_all(inhaber, \"$1$3\")",
    " ",
    "if inhaber.endswith(\",\"):",
    "    inhaber = inhaber[:-1]",
    " ",
    "if not(\"amt\" in inhaber.lower()):",
    "    if \"einen noch zu benennenden Dritten\" in inhaber:",
    "        inhaber = \"einen noch zu benennenden Dritten (\" + recht_id + \")\"",
    "    elif \"für \" in inhaber:",
    "        inhaber = inhaber.split(\"für \")[-1]",
    "        inhaber = inhaber.rstrip().lstrip()",
    "elif \"für das Landes\" in inhaber:",
    "    inhaber = \"Landes\" + inhaber.split(\"für das Landes\")[1]",
    " ",
    "inhaber = re[\"ALS_GESAMTBERECHTIGTE_1\"].replace_all(inhaber, \"\")",
    "inhaber = re[\"LÖSCHBAR_BEI_TODESNACHWEIS_1\"].replace_all(inhaber, \"\")",
    "inhaber = re[\"VOLLSTRECKBAR_2\"].replace_all(inhaber, \"\")",
    " ",
    "if re[\"UNTER_BEZUGNAHME_AUF_1\"].matches(inhaber):",
    "    inhaber = re[\"UNTER_BEZUGNAHME_AUF_1\"].find_in(inhaber, 0)",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    " ",
    "if \" auf Grund \" in inhaber:",
    "    inhaber = inhaber.split(\" auf Grund \")[0]",
    "if \", gemäß\" in inhaber:",
    "    inhaber = inhaber.split(\", gemäß\")[0]",
    "if \";  gemäß\" in inhaber:",
    "    inhaber = inhaber.split(\";  gemäß\")[0]",
    "if \" gemäß \" in inhaber:",
    "    inhaber = inhaber.split(\" gemäß \")[0]",
    "if \", nur lastend\" in inhaber:",
    "    inhaber = inhaber.split(\", nur lastend\")[0]",
    "if \" gegen \" in inhaber:",
    "    inhaber = inhaber.split(\" gegen \")[0]",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    " ",
    "for s in [\"die\", \"der\", \"den\", \"das\", \"dem\", \"den\", \"des\", \"der\", \"Berechtigten\", \"Die\", \"die\"]:",
    "    if inhaber.startswith(s):",
    "        inhaber = inhaber.replace(s, \"\", 1)",
    "        inhaber = inhaber.rstrip().lstrip()",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    " ",
    "if inhaber.endswith(\"übertragen\"):",
    "    inhaber = inhaber.replace(\"übertragen\", \"\")",
    "if inhaber.endswith(\", zu je 1/4 Anteil -\"):",
    "    inhaber = inhaber.replace(\", zu je 1/4 Anteil -\", \"\")",
    "if \" (gem. § 16 FlurbG)\" in inhaber:",
    "    inhaber = inhaber.replace(\" (gem. § 16 FlurbG)\", \"\")",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    " ",
    "return inhaber"
  ],
  "rangvermerk_auslesen_abt2_script": [
    "  ",
    "recht = \". \".join(saetze)",
    " ",
    "if not(\"Gleichrang\" in recht or \"Rang\" in recht):",
    "    return \"\"",
    "  ",
    "rvm = []",
    " ",
    "for s in saetze:",
    "    s = s.rstrip().lstrip()",
    "    if \"hat Rang vor\" in s:",
    "        rvm.append(\". \" + s.rstrip().lstrip() + \". \")",
    "    elif \"mit Rang vor\" in s:",
    "        r = s.split(\"mit Rang vor\")[1]",
    "        rvm.append(\" mit Rang vor \" + r)",
    "    elif \"im gleichen Rang mit\" in s:",
    "        r = s.split(\"im gleichen Rang mit\")[1]",
    "        rvm.append(\" im gleichen Rang mit \" + r)",
    "    elif \"im gleichen Rang wie das Recht\" in s:",
    "        r = s.split(\"im gleichen Rang wie das Recht\")[1]",
    "        rvm.append(\" im gleichen Rang wie das Recht \" + r)",
    "    elif \"im Gleichrang mit\" in s:",
    "        r = s.split(\"im Gleichrang mit\")[1]",
    "        rvm.append(\" im Gleichrang mit \" + r)",
    "    elif \"im Rang nach\" in s:",
    "        r = s.split(\"im Rang nach\")[1]",
    "        rvm.append(\" im Rang nach \" + r)",
    "    elif \"im Rang vor\" in s:",
    "        r = s.split(\"im Rang vor\")[1]",
    "        rvm.append(\" im Rang vor \" + r)",
    " ",
    "for i, r in enumerate(rvm):",
    "    if \"eingetragen am\" in r:",
    "       rvm[i] = r.split(\"eingetragen am\")[0]",
    "    if \"am \" in r:",
    "       rvm[i] = r.split(\"am \")[0]",
    "    if \" eingetragen\" in r:",
    "       rvm[i] = r.split(\" eingetragen\")[0]",
    " ",
    "if len(rvm) == 0:",
    "    raise Exception(\"Rangvermerk vorhanden, aber nicht lesbar\")",
    " ",
    "rvm_join = \"\".join(rvm)",
    " ",
    "return rvm_join.rstrip().lstrip()"
  ],
  "klassifiziere_rechteart": [
    "recht = saetze[0]",
    "leitungsrecht = [",
    "    \"Leitungsrecht\",",
    "    \"Leitungs-\",",
    "    \"Leitungssystemrecht\",",
    "    \"Trinkwasserleitung\",",
    "    \"Leitungstrassenrecht\",",
    "    \"leitungsrecht\",",
    "    \"Ferngasleitungs\",",
    "    \"Kabelanlagenrecht\",",
    "    \"-Leitung\",",
    "    \"leitung \",",
    "    \"Leitung \",",
    "    \"Unterhaltung von elektrischen Leitungen\",",
    "]",
    "if \"Kabelrecht\" in recht or \"Kabeltrassen\" in recht:",
    "    return RechteArt.Kabelrecht",
    "if any(l in recht for l in leitungsrecht):",
    "    if \"Gasleitungsrecht\" in recht:",
    "        return RechteArt.GasleitungGasreglerstationFerngasltg",
    "    elif \"Hochspannungsfreileitung\" in recht:",
    "        return RechteArt.Hochspannungsleitungsrecht",
    "    else:",
    "        return RechteArt.LeitungsOderAnlagenrecht",
    "if \"Übereignungsanspruch\" in recht:",
    "    return RechteArt.Ruckerwerbsvormerkung",
    "if \"Windkraftanlage\" in recht:",
    "    return RechteArt.Windkraftanlagenrecht",
    "if \"Windmessmast\" in recht:",
    "    return RechteArt.Windkraftanlagenrecht",
    "if \"Erbbaurecht\" in recht:",
    "    return RechteArt.Erbbaurecht",
    "if \"Veräußerungsverbot\" in recht:",
    "    return RechteArt.VerausserungsBelastungsverbot",
    "if \"Photovoltaikanlagenrecht\" in recht:",
    "    return RechteArt.Photovoltaikanlagenrecht",
    "if \"Löschwasserentnahmestellenrecht\" in recht:",
    "    return RechteArt.Wasserentnahmerecht",
    "if \"Nutzung\" in recht and \"für Kompensationsmaßnahmen\" in recht:",
    "    return RechteArt.Nutzungsbeschrankung",
    "if \"Gehölzpflanzung\" in recht:",
    "    return RechteArt.Nutzungsbeschrankung",
    "if \"Gartennutzungsrecht\" in recht:",
    "    return RechteArt.Nutzungsbeschrankung",
    "if \"Wegerecht\" in recht:",
    "    return RechteArt.GehWegeFahrOderLeitungsrecht",
    "if \"Vormerkung zur Sicherung des bedingten Anspruchs auf Rückauflassung\" in recht:",
    "    return RechteArt.Rueckauflassungsvormerkung",
    "if \"Vormerkung zur Sicherung des Anspruchs auf Rückauflassung\" in recht:",
    "    return RechteArt.Rueckauflassungsvormerkung",
    "if \"Rückauflassungsvormerkung\" in recht:",
    "    return RechteArt.Rueckauflassungsvormerkung",
    "if \"uflassungsvormerkung\" in recht:",
    "    return RechteArt.Auflassungsvormerkung",
    "if \"Vorkaufsrecht\" in recht or \"Eigentumsübertragungsvormerkung\" in recht or \"Ankaufsrecht\" in recht:",
    "    return RechteArt.Vorkaufsrecht",
    "if \"Nießbrauch\" in recht:",
    "    return RechteArt.Niessbrauchrecht",
    "if \"Mitbenutzungsrecht\" in recht:",
    "    return RechteArt.Mitbenutzungsrecht",
    "if \"Widerspruch\" in recht:",
    "    return RechteArt.Widerspruch",
    "if \"Transformator\" in recht:",
    "    return RechteArt.Transformatorenrecht",
    "if \"Zugangsrecht\" in recht:",
    "    return RechteArt.Betretungsrecht",
    "if \"Erbbaurecht\" in recht:",
    "    return RechteArt.Erbbaurecht",
    "if \"Übergabestationsrecht\" in recht:",
    "    return RechteArt.SonstigeDabagrechteart",
    "if \"Windmeßmast\" in recht:",
    "    return RechteArt.Windkraftanlagenrecht",
    "if \"Wohnungsrecht\" in recht:",
    "    return RechteArt.WohnungsOderMitbenutzungsrecht",
    "if \"Einwirkungsbeschränkung\" in recht:",
    "    return RechteArt.Nutzungsbeschrankung",
    "if \"Verfügungsverbot\" in recht:",
    "    return RechteArt.Verfuegungsverbot",
    " ",
    "mit_dem_inhalt_des_rechts = re[\"MIT_DEM_INHALT_DES_RECHTS_1\"].find_in(recht, 0)",
    "if mit_dem_inhalt_des_rechts is not None:",
    "    return RechteArt.SpeziellVormerkung(int(float(mit_dem_inhalt_des_rechts)))",
    "mit_dem_inhalt_des_rechts = re[\"MIT_DEM_INHALT_DES_RECHTS_2\"].find_in(recht, 0)",
    "if mit_dem_inhalt_des_rechts is not None:",
    "    return RechteArt.SpeziellVormerkung(int(float(mit_dem_inhalt_des_rechts)))",
    "mit_dem_inhalt_des_rechts = re[\"MIT_DEM_INHALT_DES_RECHTS_3\"].find_in(recht, 0)",
    "if mit_dem_inhalt_des_rechts is not None:",
    "    return RechteArt.SpeziellVormerkung(int(float(mit_dem_inhalt_des_rechts)))",
    " ",
    "benutzungsrecht = [",
    "    \"Benutzungsrecht\",",
    "    \"Benutzungs-\",",
    "    \"Benutzung-\",",
    "]",
    "if any(b in recht for b in benutzungsrecht):",
    "    return RechteArt.Benutzungsrecht",
    "if \"Fahrrecht\" in recht:",
    "    return RechteArt.GehWegeFahrOderLeitungsrecht",
    " ",
    "if \"Verpflichtung\" in recht and \"frei zugänglich zu halten\":",
    "    return RechteArt.SonstigeDabagrechteart",
    "if \"Abstandsflächen\" in recht:",
    "    return RechteArt.SonstigeDabagrechteart",
    "if \"Recht zur Pflanzung\" in recht:",
    "    return RechteArt.SonstigeDabagrechteart",
    "if \"Bodenreformvermerk\" in recht:",
    "    return RechteArt.SonstigeDabagrechteart",
    "if \"Duldung\" in recht:",
    "    if \"Baumwurf\" in recht:",
    "        return RechteArt.DuldungVonEinwirkungenDurchBaumwurf",
    "    elif \"Fernmelde\" in recht:",
    "        return RechteArt.DuldungVonFernmeldeanlagen",
    "    else:",
    "        return RechteArt.SonstigeDabagrechteart",
    "if \"Ausgleich\" in recht and \"maßnahmen\" in recht:",
    "    return RechteArt.SonstigeDabagrechteart",
    "if \"Trafostation\" in recht:",
    "    return RechteArt.Transformatorenrecht",
    "if \"Überbau\" in recht:",
    "    return RechteArt.Ueberbaurecht",
    "if \"Nutzungsbeschränkung\" in recht:",
    "    return RechteArt.Nutzungsbeschrankung",
    "if \"Grundwassermessstellenrecht\" in recht:",
    "    return RechteArt.SonstigeDabagrechteart",
    " ",
    "raise Exception(\"Konnte RechteArt nicht auslesen\")"
  ],
  "klassifiziere_schuldenart": [
    " ",
    "recht = \". \".join(saetze)",
    "",
    "stichwoerter = [",
    "    ('Gesamtgrundschuld', SchuldenArt.Grundschuld),",
    "    ('Grundschuld', SchuldenArt.Grundschuld),",
    "    ('grundschuld', SchuldenArt.Grundschuld),",
    "    ('Hypothek', SchuldenArt.Hypothek),",
    "    ('Rentenschuld', SchuldenArt.Rentenschuld),",
    "    ('Aufbauhypothek', SchuldenArt.Aufbauhypothek),",
    "    ('Sicherungshypothek', SchuldenArt.Sicherungshypothek),",
    "    ('Widerspruch', SchuldenArt.Widerspruch),",
    "    ('Arresthypothek', SchuldenArt.Arresthypothek),",
    "    ('Hoechstbetragshypothek', SchuldenArt.Hoechstbetragshypothek),",
    "    ('Sicherungsgrundschuld', SchuldenArt.Sicherungsgrundschuld),",
    "    ('Zwangssicherungshypothek', SchuldenArt.Zwangssicherungshypothek),",
    "    ('Kaufpreis', SchuldenArt.Grundschuld),",
    "    ('Gläubiger', SchuldenArt.Grundschuld),",
    "]",
    " ",
    "if \"Sicherungshypothek\" in recht:",
    "    if \"§128\" in recht:",
    "        return SchuldenArt.SicherungshypothekGem128ZVG",
    "    else:",
    "        return SchuldenArt.Sicherungshypothek",
    "else:",
    "    for k, v in stichwoerter:",
    "        if k in recht:",
    "            return v",
    " ",
    "raise Exception(\"Konnte SchuldenArt nicht auslesen\")"
  ]
}