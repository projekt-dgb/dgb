{
  "regex": {
    "ALS_GESAMTBERECHTIGTE_1": ",? als Gesamtberechtigte gemäß § (\\d*) BGB -?",
    "AMT_FÜR_1": "für (.*)mt für (.*)",
    "AUFLÖSEND_BEDINGT_1": "Das Recht ist auflösend bedingt",
    "AUSÜBUNG_1": "Die Ausübung (.*) darf Dritten überlassen werden",
    "BELASTETEN_GRUNDSTÜCKE_1": "jetzt unter(.*)Nr. (.*) gebucht",
    "BINDESTRICH_1": "- ([[:lower:]])",
    "BINDESTRICH_2": "-\\nund",
    "EINGETRAGEN_AM_1": "ingetragen am (\\d\\d).(\\d\\d).(\\d\\d\\d\\d)",
    "EINGETRAGEN_AM_2": "ingetragen (.*) am (\\d\\d).(\\d\\d).(\\d\\d\\d\\d)",
    "EINGETRAGEN_AM_3": "(.*) eingetragen am (dd).(dd).(dddd)",
    "EINGETRAGEN_AM_4": "(.*)eingetragen am(.*)",
    "EINGETRAGEN_AM_5": "(.*)am(.*)",
    "FLUR_FLURSTUECK_1": "Flur (\\d*) Flurstück (\\S*)",
    "FLUR_FLURSTUECK_2": "Flur (\\d*) Flst. (\\S*)",
    "FLUR_FLURSTUECK_3": "Flur (\\d*), Flst. (\\S*)",
    "FLUR_FLURSTUECK_4": "Flurstück (\\S*) der Flur (\\d*)",
    "FLUR_FLURSTUECK_5": "Flur (\\d*), Flurstück (\\S*)",
    "FLUR_FLURSTUECK_6": "Flur (\\d*), Flurstück (\\S*) und (\\S*)",
    "FLUR_FLURSTUECK_7": "Flur (\\d*), Flst. (\\S*) und (\\S*)",
    "FLUR_FLURSTUECK_BZGL_1": "\\((.*)BV-Nr.(.*)\\)",
    "FÜR_1": "für (.*)",
    "GESAMTHAFT_1": "Gesamthaft besteht in (.*)",
    "GLEICHRANG_1": "ingetragen(.*)im gleichen Rang mit(.*)",
    "GLEICHRANG_2": "(.*)im gleichen Rang mit(.*)",
    "GLEICHRANG_3": "(.*)im Gleichrang mit den Rechten(.*)",
    "GLEICHRANG_4": "(.*)im Gleichrang mit(.*)",
    "GRUNDSCHULD_1": "Grundschuld (.*) über (.*) für (.*)",
    "GRUNDSCHULD_2": "(.*) Grundschuld (.*) für (.*)",
    "HAT_RECHT_VOR_1": "(.*) hat Recht vor (.*)",
    "HAT_RECHT_VOR_2\n": "(.*) hat Rang vor (.*)",
    "IM_RANG_VOR_1": "(.*) im Rang vor (.*) eingetragen am (.*)",
    "IM_RANG_VOR_2": "(.*) im Rang vor (.*)",
    "KOMMA_1": "(.*),(\\d\\d)",
    "KOMMA_2": "(.*)\\.(\\d\\d)",
    "LASTEND_AN_ANTEIL_1": "dem Anteil Abt. I Nr. (.*)",
    "LÖSCHBAR_BEI_TODESNACHWEIS_1": ",? löschbar bei Todesnachweis,?",
    "MIT_DEM_INHALT_DES_RECHTS_1": "mit dem Inhalt des Rechts Abteilung II Nr. (\\d*)",
    "NEU_EINGETRAGEN_1": "Nr\\. (\\S*)(.*)als Nr\\. (\\S*) neu eingetragen",
    "NEU_EINGETRAGEN_2": "Nummer (\\S*)(.*)als Nummer (\\S*) eingetragen\n",
    "NUR_LASTEND_AN_1": "Nur lastend an (.*):",
    "NUR_LASTEND_AN_2": "Nur lastend auf (.*):\n",
    "NUR_LASTEND_AN_3": "nur lastend an (.*) für",
    "NUR_LASTEND_AN_4": "nur lastend auf (.*) für",
    "UNTER_BEZUGNAHME_AUF_1": "(.*)unter Bezugnahme auf(.*)",
    "VERERBLICH_1": "Das Recht ist vererblich",
    "VERSELBSTSTÄNDIGT_1": "Aus(.*)Nr. (S*)(.*)verselbstständigt und als(.*)Nr. (S*) eingetragen",
    "VOLLSTRECKBAR_1": "(.)ollstreckbar gemäß (.*) ZPO",
    "VOLLSTRECKBAR_2": ",?(.)(.)ollstreckbar nach (.*)",
    "VON_AMTS_WEGEN_EINGETRAGEN_1": "Von Amts wegen eingetragen",
    "VON_BIS_1": "(\\d*)-(\\d*)",
    "VORMERKUNG_BPD_1": "(.*)Vormerkung(.*)Dienstbarkeit(.*)Rechts Abteilung II Nr. (\\d)(.*)",
    "WIDERSPRUCH_1": "Widerspruch (.*) zugunsten (.*) für (.*) gegen",
    "ZERLEGT_1": "Flurstück (\\d*) ist zerlegt in die Flurstücke (\\d*) und (\\d*)",
    "ZUGUNSTEN_1": "(.*)zugunsten(.*)",
    "ÜBERTRAGEN_1": "Von Nr\\. (\\S*)\\W(.*)übertragen nach\n",
    "ÜBERTRAGEN_AM_1": "hierher übertragen am (\\d\\d).(\\d\\d).(\\d\\d\\d\\d)"
  },
  "abkuerzungen_script": [
    "return [",
    "    \" Dr\",",
    "    \" Prof\",",
    "    \" Co\",",
    "    \" v\", ",
    "    \" URNr\", ",
    "    \" Abt\", ",
    "    \" Co\", ",
    "    \"bzlg\",",
    "    \" geb\", ",
    "    \" lfd\", ",
    "    \" Nr\", ",
    "]"
  ],
  "text_saubern_script": [
    " ",
    "recht = recht.replace(\"G r u n d s c h u l d\", \"Grundschuld\")",
    "recht = recht.replace(\"o h n e\", \"ohne\")",
    "recht = recht.replace(\"B r i e f\", \"Brief\")",
    "recht = recht.replace(\"ü b e r\", \"über\")",
    "recht = recht.replace(\"f ü r\", \"für\")",
    " ",
    "zeilen = recht.splitlines()",
    "for index, zeile in enumerate(zeilen):",
    "    if re[\"BINDESTRICH_1\"].matches(zeile):",
    "        zeilen[index] = re[\"BINDESTRICH_1\"].replace_all(zeile, \"- $1\")",
    "        zeilen[index] = re[\"BINDESTRICH_2\"].replace_all(zeile, \"- und\")",
    " ",
    "zeilen = [z for zeile in zeilen for z in zeile.splitlines()]",
    " ",
    "text_sauber = \"\"",
    "for i, zeile in enumerate(zeilen):",
    "    zeile = zeile.strip()",
    "    if zeile == \"\":",
    "        continue",
    " ",
    "    naechste_zeile = zeilen[i + 1] if i + 1 < len(zeilen) else None",
    "    if naechste_zeile is not None:",
    "        if zeile.endswith(\"-\") and naechste_zeile.startswith(\"und\"):",
    "            zeile = zeile[:-1]",
    "    zeile = zeile.replace(\"Aus- übung\", \"Ausübung\")",
    "    zeile = zeile.replace(\"ei- ner\", \"einer\")",
    "    text_sauber += zeile",
    " ",
    "return text_sauber"
  ],
  "text_kuerzen_abt2_script": [
    " ",
    "satz_hat_rangvermerk = lambda satz: \"Gleichrang\" in satz or \"Rang\" in satz",
    "satz_nicht_relevant = lambda satz: any(s in satz for s in [\"Gemäß\", \"Unter Bezugnahme auf\", \"Eingetragen\", \"eingetragen am\"])",
    "teste_satz = lambda satz: satz_hat_rangvermerk(satz) or not(satz_nicht_relevant(satz))",
    "saetze = [s for s in filter(teste_satz, saetze)]",
    " ",
    "# Irrelevante Sätze rausfiltern",
    "saetze = filter(lambda satz: not(re[\"AUSÜBUNG_1\"].matches(satz)), saetze)",
    "saetze = filter(lambda satz: not(re[\"VOLLSTRECKBAR_1\"].matches(satz)), saetze)",
    "saetze = filter(lambda satz: not(re[\"VOLLSTRECKBAR_2\"].matches(satz)), saetze)",
    "saetze = filter(lambda satz: not(re[\"VERERBLICH_1\"].matches(satz)), saetze)",
    "saetze = filter(lambda satz: not(re[\"VON_AMTS_WEGEN_EINGETRAGEN_1\"].matches(satz)), saetze)",
    "saetze = filter(lambda satz: not(re[\"BELASTETEN_GRUNDSTÜCKE_1\"].matches(satz)), saetze)",
    " ",
    "# Sätze mit weniger als 2 Wörtern löschen",
    "saetze = list(filter(lambda satz: (\"\".join(satz.rstrip().lstrip())).count(\" \") > 1, saetze))",
    " ",
    "if \"Auflassungsvormerkung\" in \"\".join(saetze):",
    "    list(filter(lambda satz: not(re[\"AUFLÖSEND_BEDINGT_1\"].matches(satz)), saetze))",
    " ",
    "gekuerzt = \". \".join(saetze)",
    "if re[\"NUR_LASTEND_AN_1\"].matches(gekuerzt):",
    "    gekuerzt = re[\"NUR_LASTEND_AN_1\"].replace_all(gekuerzt, \"\")",
    "if re[\"NUR_LASTEND_AN_2\"].matches(gekuerzt):",
    "    gekuerzt = re[\"NUR_LASTEND_AN_2\"].replace_all(gekuerzt, \"\")",
    "if re[\"NUR_LASTEND_AN_3\"].matches(gekuerzt):",
    "    gekuerzt = re[\"NUR_LASTEND_AN_3\"].replace_all(gekuerzt, \"für\")",
    "if re[\"NUR_LASTEND_AN_4\"].matches(gekuerzt):",
    "    gekuerzt = re[\"NUR_LASTEND_AN_4\"].replace_all(gekuerzt, \"für\")",
    " ",
    "gekuerzt = gekuerzt.rstrip().lstrip()",
    "if gekuerzt.startswith(\"Beschränkte persönliche Dienstbarkeit\"):",
    "    gekuerzt = gekuerzt.replace(\"Beschränkte persönliche Dienstbarkeit\", \"BpD\")",
    " ",
    "if re[\"VORMERKUNG_BPD_1\"].matches(gekuerzt):",
    "    gekuerzt = re[\"VORMERKUNG_BPD_1\"].replace_all(gekuerzt, \"Vormerkung BpD mit dem Inhalt des Rechts Abt. II $4 $5\")",
    " ",
    "return gekuerzt"
  ],
  "text_kuerzen_abt3_script": [
    "if schuldenart == \"\" or betrag == \"\":",
    "    return \"\"",
    "return schuldenart + \" über \" + betrag"
  ],
  "betrag_auslesen_script": [
    " ",
    "recht = saetze[0]",
    " ",
    "waehrungen = [",
    "    (' EUR', Waehrung.Euro),",
    "    (' Euro', Waehrung.Euro),",
    "    (' €', Waehrung.Euro),",
    "    (' Deutsche Mark', Waehrung.DMark),",
    "    (' DM', Waehrung.DMark),",
    "    (' Mark', Waehrung.MarkDDR),",
    "    (' M', Waehrung.MarkDDR),",
    "    (' Goldmark', Waehrung.Goldmark),",
    "    (' GM', Waehrung.Goldmark),",
    "    (' Reichsmark', Waehrung.Reichsmark),",
    "    (' RM', Waehrung.Reichsmark),",
    "    (' Rentenmark', Waehrung.Rentenmark),",
    "    (' GF', Waehrung.GrammFeingold),",
    "    (' Gramm Feingold', Waehrung.GrammFeingold),",
    "]",
    " ",
    "waehrung = None",
    "for k, v in waehrungen:",
    "    if k in recht:",
    "        waehrung = v",
    " ",
    "if waehrung is None:",
    "    raise Exception(\"Konnte Währung nicht auslesen\")",
    " ",
    "for k, v in waehrungen:",
    "    recht = recht.replace(k, \"\")",
    " ",
    "recht = recht.rstrip().lstrip()",
    " ",
    "nachkomma = 0",
    "if re[\"KOMMA_1\"].matches(recht):",
    "    nachkomma = int(float(re[\"KOMMA_1\"].find_in(recht, 1)))",
    "    recht = re[\"KOMMA_1\"].replace_all(recht, \"$1\")",
    "elif re[\"KOMMA_2\"].matches(recht):",
    "    nachkomma = int(float(re[\"KOMMA_2\"].find_in(recht, 1)))",
    "    recht = re[\"KOMMA_2\"].replace_all(recht, \"$1\")",
    " ",
    "recht = recht.rstrip().lstrip()",
    "recht = recht.replace(\".\", \"\")",
    "recht = recht.replace(\",\", \"\")",
    "",
    "wert = int(float(recht))",
    "return Betrag(wert, nachkomma, waehrung)"
  ],
  "rechtsinhaber_auslesen_abt3_script": [
    "",
    "recht = \". \".join(saetze)",
    "inhaber = None",
    " ",
    "if re[\"ZUGUNSTEN_1\"].matches(recht):",
    "    # \"Widerspruch für XXX zugunsten YYY\" - YYY ist der Rechteinhaber, nicht XXX",
    "    inhaber = re[\"ZUGUNSTEN_1\"].find_in(saetze[0], 1)",
    " ",
    "# \"[RechteArt] für das Landesamt für XXX\"",
    "elif \"amt für\" in saetze[0].lower():",
    "    inhaber = re[\"AMT_FÜR_1\"].find_in(saetze[0], 0) + \"mt für \" + re[\"AMT_FÜR_1\"].find_in(saetze[0], 1)",
    "else:",
    "    inhaber = re[\"FÜR_1\"].find_in(saetze[0], 0)",
    "#",
    "if inhaber is None:",
    "    return \"\"",
    "inhaber = inhaber.rstrip().lstrip()",
    "inhaber = re[\"ALS_GESAMTBERECHTIGTE_1\"].replace_all(inhaber, \"\")",
    "inhaber = re[\"LÖSCHBAR_BEI_TODESNACHWEIS_1\"].replace_all(inhaber, \"\")",
    "inhaber = re[\"VOLLSTRECKBAR_2\"].replace_all(inhaber, \"\")",
    " ",
    "if re[\"UNTER_BEZUGNAHME_AUF_1\"].matches(inhaber):",
    "    inhaber = re[\"UNTER_BEZUGNAHME_AUF_1\"].find(inhaber, 0)",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    "for s in [\"die\", \"der\", \"den\", \"das\"]:",
    "    if inhaber.startswith(s):",
    "        inhaber = inhaber.replace(s, \"\", 1)",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    " ",
    "return inhaber"
  ],
  "rechtsinhaber_auslesen_abt2_script": [
    " ",
    "recht = \". \".join(saetze)",
    "inhaber = None",
    " ",
    "if re[\"ZUGUNSTEN_1\"].matches(recht):",
    "    # \"Widerspruch für XXX zugunsten YYY\" - YYY ist der Rechteinhaber, nicht XXX",
    "    inhaber = re[\"ZUGUNSTEN_1\"].find_in(saetze[0], 1)",
    " ",
    "# \"[RechteArt] für das Landesamt für XXX\"",
    "elif \"amt für\" in saetze[0].lower():",
    "    inhaber = re[\"AMT_FÜR_1\"].find_in(saetze[0], 0) + \"mt für \" + re[\"AMT_FÜR_1\"].find_in(saetze[0], 1)",
    "else:",
    "    inhaber = re[\"FÜR_1\"].find_in(saetze[0], 0)",
    "#",
    "if inhaber is None:",
    "    return \"\"",
    "inhaber = inhaber.rstrip().lstrip()",
    "inhaber = re[\"ALS_GESAMTBERECHTIGTE_1\"].replace_all(inhaber, \"\")",
    "inhaber = re[\"LÖSCHBAR_BEI_TODESNACHWEIS_1\"].replace_all(inhaber, \"\")",
    "inhaber = re[\"VOLLSTRECKBAR_2\"].replace_all(inhaber, \"\")",
    " ",
    "if re[\"UNTER_BEZUGNAHME_AUF_1\"].matches(inhaber):",
    "    inhaber = re[\"UNTER_BEZUGNAHME_AUF_1\"].find_in(inhaber, 0)",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    "for s in [\"die\", \"der\", \"den\", \"das\"]:",
    "    if inhaber.startswith(s):",
    "        inhaber = inhaber.replace(s, \"\", 1)",
    " ",
    "inhaber = inhaber.rstrip().lstrip()",
    " ",
    "return inhaber"
  ],
  "rangvermerk_auslesen_abt2_script": [
    "",
    "recht = \". \".join(saetze)",
    " ",
    "if not(\"Gleichrang\" in recht or \"Rang\" in recht):",
    "    return \"\"",
    " ",
    "s = saetze[0]",
    " ",
    "im_gleichrang_mit = []",
    "if re[\"GLEICHRANG_1\"].matches(s):",
    "    rvm_1 = re[\"GLEICHRANG_1\"].find_in(s, 1)",
    "    if re[\"EINGETRAGEN_AM_4\"].matches(rvm_1):",
    "        rvm_1 = re[\"EINGETRAGEN_AM_4\"].replace_all(rvm_1, \"$1\")",
    "    if re[\"EINGETRAGEN_AM_5\"].matches(rvm_1):",
    "        rvm_1 = re[\"EINGETRAGEN_AM_5\"].replace_all(rvm_1, \"$1\")",
    "    im_gleichrang_mit.append(rvm_1.rstrip().lstrip())",
    " ",
    "if re[\"GLEICHRANG_2\"].matches(s):",
    "    rvm_1 = re[\"GLEICHRANG_2\"].find_in(s, 1)",
    "    if re[\"EINGETRAGEN_AM_4\"].matches(rvm_1):",
    "        rvm_1 = re[\"EINGETRAGEN_AM_4\"].replace_all(rvm_1, \"$1\")",
    "    if re[\"EINGETRAGEN_AM_5\"].matches(rvm_1):",
    "        rvm_1 = re[\"EINGETRAGEN_AM_5\"].replace_all(rvm_1, \"$1\")",
    "    im_gleichrang_mit.append(rvm_1.rstrip().lstrip())",
    " ",
    "im_gleichen_rang_mit_den_rechten = []",
    "if re[\"GLEICHRANG_3\"].matches(s):",
    "    rvm_1 = re[\"GLEICHRANG_3\"].find_in(s, 1)",
    "    if re[\"EINGETRAGEN_AM_4\"].matches(rvm_1):",
    "        rvm_1 = re[\"EINGETRAGEN_AM_4\"].replace_all(rvm_1, \"$1\")",
    "    if re[\"EINGETRAGEN_AM_5\"].matches(rvm_1):",
    "        rvm_1 = re[\"EINGETRAGEN_AM_5\"].replace_all(rvm_1, \"$1\")",
    "    im_gleichen_rang_mit_den_rechten.append(rvm_1.rstrip().lstrip())",
    " ",
    "if len(rangvermerk) < 1:",
    "    raise Exception(\"Rangvermerk in Text, konnte RVM aber nicht auslesen\")",
    " ",
    "return \" \".join(rangvermerk)"
  ],
  "klassifiziere_rechteart": [
    "recht = saetze[0]",
    "leitungsrecht = [",
    "    \"Leitungsrecht\",",
    "    \"Leitungs-\",",
    "    \"Trinkwasserleitung\",",
    "    \"leitungsrecht\",",
    "    \"Ferngasleitungs\",",
    "    \"Kabelanlagenrecht\"",
    "]",
    "if any(l in recht for l in leitungsrecht):",
    "    if \"Gasleitungsrecht\" in recht:",
    "        return RechteArt.GasleitungGasreglerstationFerngasltg",
    "    elif \"Hochspannungsfreileitung\" in recht:",
    "        return RechteArt.Hochspannungsleitungsrecht",
    "    else:",
    "        return RechteArt.LeitungsOderAnlagenrecht",
    "if \"Kabelrecht\" in recht or \"Kabeltrassenrecht\" in recht:",
    "    return RechteArt.Kabelrecht",
    "if \"Wegerecht\" in recht:",
    "    return RechteArt.GehWegeFahrOderLeitungsrecht",
    "if \"Vormerkung zur Sicherung des Anspruchs auf Rückauflassung\" in recht:",
    "    return RechteArt.Rueckauflassungsvormerkung",
    "if \"Auflassungsvormerkung\" in recht:",
    "    return RechteArt.Auflassungsvormerkung",
    "if \"Vorkaufsrecht\" in recht or \"Eigentumsübertragungsvormerkung\" in recht:",
    "    return RechteArt.Vorkaufsrecht",
    "if \"Nießbrauch\" in recht:",
    "    return RechteArt.Niessbrauchrecht",
    "if \"Mitbenutzungsrecht\" in recht:",
    "    return RechteArt.Mitbenutzungsrecht",
    "if \"Widerspruch\" in recht:",
    "    return RechteArt.Widerspruch",
    "mit_dem_inhalt_des_rechts = re[\"MIT_DEM_INHALT_DES_RECHTS_1\"].find_in(recht, 0)",
    "if mit_dem_inhalt_des_rechts is not None:",
    "    return RechteArt.SpeziellVormerkung(int(float(mit_dem_inhalt_des_rechts)))",
    "benutzungsrecht = [",
    "    \"Benutzungsrecht\",",
    "    \"Benutzungs-\",",
    "    \"Benutzung-\",",
    "]",
    "if any(b in recht for b in benutzungsrecht):",
    "    return RechteArt.Benutzungsrecht",
    "raise Exception(\"Konnte RechteArt nicht auslesen\")"
  ],
  "klassifiziere_schuldenart": [
    " ",
    "recht = saetze[0]",
    " ",
    "stichwoerter = [",
    "    ('Gesamtgrundschuld', SchuldenArt.Grundschuld),",
    "    ('Grundschuld', SchuldenArt.Grundschuld),",
    "    ('Hypothek', SchuldenArt.Hypothek),",
    "    ('Rentenschuld', SchuldenArt.Rentenschuld),",
    "    ('Aufbauhypothek', SchuldenArt.Aufbauhypothek),",
    "    ('Sicherungshypothek', SchuldenArt.Sicherungshypothek),",
    "    ('Widerspruch', SchuldenArt.Widerspruch),",
    "    ('Arresthypothek', SchuldenArt.Arresthypothek),",
    "    ('Hoechstbetragshypothek', SchuldenArt.Hoechstbetragshypothek),",
    "    ('Sicherungsgrundschuld', SchuldenArt.Sicherungsgrundschuld),",
    "    ('Zwangssicherungshypothek', SchuldenArt.Zwangssicherungshypothek),",
    "]",
    " ",
    "if \"Sicherungshypothek\" in recht:",
    "    if \"§128\" in recht:",
    "        return SchuldenArt.SicherungshypothekGem128ZVG",
    "    else:",
    "        return SchuldenArt.Sicherungshypothek",
    "else:",
    "    for k, v in stichwoerter:",
    "        if k in recht:",
    "            return v",
    " ",
    "raise Exception(\"Konnte SchuldenArt nicht auslesen\")"
  ]
}